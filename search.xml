<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>selenium的使用</title>
      <link href="posts/85be2b78.html"/>
      <url>posts/85be2b78.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="selenium"><a href="#selenium" class="headerlink" title="selenium"></a>selenium</h1><h2 id="一、前期准备"><a href="#一、前期准备" class="headerlink" title="一、前期准备"></a>一、前期准备</h2><h3 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h3><p>selenium本身是一个自动化测试工具。它可以让python代码调用浏览器。并获取到浏览器中加载的各种资源。 我们可以利用selenium提供的各项功能。 帮助我们完成数据的抓取。</p><h3 id="2、学习目标"><a href="#2、学习目标" class="headerlink" title="2、学习目标"></a>2、学习目标</h3><ol><li>掌握 selenium发送请求，加载网页的方法</li><li>掌握 selenium简单的元素定位的方法</li><li>掌握 selenium的基础属性和方法</li><li>掌握 selenium退出的方法</li></ol><h3 id="3、安装"><a href="#3、安装" class="headerlink" title="3、安装"></a>3、安装</h3><p>安装：pip install selenium</p><p>它与其他库不同的地方是他要启动你电脑上的浏览器, 这就需要一个驱动程序来辅助. </p><p>这里推荐用chrome浏览器</p><p>chrome驱动地址:<a href="http://chromedriver.storage.googleapis.com/index.html">http://chromedriver.storage.googleapis.com/index.html</a></p><p><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-20210125174618013.png"></p><p><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-20210125174658971.png"></p><p>根据你电脑的不同自行选择吧.  win64选win32即可.</p><p>然后关键的来了. 把你下载的浏览器驱动放在python解释器所在的文件夹</p><p>Windwos:  py -0p     查看Python路径</p><p>Mac: open + 路径</p><p>例如：open /usr/local/bin/</p><p><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-20210125175328245.png"></p><p> 前期准备工作完毕.  上代码看看 感受一下selenium</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver <span class="token keyword">import</span> Chrome  <span class="token comment"># 导入谷歌浏览器的类</span><span class="token comment"># 创建浏览器对象</span>web <span class="token operator">=</span> Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 如果你的浏览器驱动放在了解释器文件夹</span>web<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span>  <span class="token comment"># 输入网址</span><span class="token keyword">print</span><span class="token punctuation">(</span>web<span class="token punctuation">.</span>title<span class="token punctuation">)</span>  <span class="token comment"># 打印title</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行一下你会发现神奇的事情发生了. 浏览器自动打开了. 并且输入了网址. 也能拿到网页上的title标题. </p><p><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-20210125175906255.png"></p><h2 id="二、selenium的基本使用"><a href="#二、selenium的基本使用" class="headerlink" title="二、selenium的基本使用"></a>二、selenium的基本使用</h2><h3 id="1、加载网页："><a href="#1、加载网页：" class="headerlink" title="1、加载网页："></a>1、加载网页：</h3><p>selenium通过控制浏览器，所以对应的获取的数据都是elements中的内容</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> Bydriver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 访问百度</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://www.baidu.com/"</span><span class="token punctuation">)</span><span class="token comment"># 截图</span>driver<span class="token punctuation">.</span>save_screenshot<span class="token punctuation">(</span><span class="token string">"baidu.png"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、定位和操作："><a href="#2、定位和操作：" class="headerlink" title="2、定位和操作："></a>2、定位和操作：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 搜索关键字 杜卡迪</span>driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">"kw"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">"杜卡迪"</span><span class="token punctuation">)</span><span class="token comment"># 点击id为su的搜索按钮</span>driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">"su"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、查看请求信息："><a href="#3、查看请求信息：" class="headerlink" title="3、查看请求信息："></a>3、查看请求信息：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">driver<span class="token punctuation">.</span>page_source   <span class="token comment"># 获取页面内容</span>driver<span class="token punctuation">.</span>get_cookies<span class="token punctuation">(</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>current_url<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4、退出"><a href="#4、退出" class="headerlink" title="4、退出"></a>4、退出</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">driver<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 退出当前页面</span>driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment"># 退出浏览器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol><li>selenium的导包:<code>from selenium import webdriver</code></li><li>selenium创建driver对象:<code>webdriver.Chrome()</code></li><li>selenium请求数据:<code>driver.get("http://www.baidu.com/")</code></li><li>selenium查看数据: <code>driver.page_source</code></li><li>关闭浏览器: <code>driver.quit()</code></li><li>根据id定位元素: <code>driver.find_element_by_id("kw")/driver.find_element(By.ID, "kw")</code></li><li>操作点击事件: <code>click()</code></li><li>给输入框赋值:<code>send_keys()</code></li></ol><h2 id="三、元素定位的方法"><a href="#三、元素定位的方法" class="headerlink" title="三、元素定位的方法"></a>三、元素定位的方法</h2><h3 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h3><ol><li>掌握 selenium定位元素的方法</li><li>掌握 selenium从元素中获取文本和属性的方法</li></ol><blockquote><p>通过selenium的基本使用可以简单定位元素和获取对应的数据,接下来我们再来学习下 定位元素的其他方法</p></blockquote><h3 id="1、selenium的定位操作"><a href="#1、selenium的定位操作" class="headerlink" title="1、selenium的定位操作"></a>1、selenium的定位操作</h3><ol><li><p>元素定位的两种写法：</p><ul><li><p>直接调用型</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">el <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_xxx<span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token comment"># xxx是定位方式，后面我们会讲，value为该方式对应的值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>使用By类型(需要导入By)  建议使用这种方式</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"> <span class="token comment"># 直接掉用的方式会在底层翻译成这种方式</span><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> Bydriver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>xxx<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>元素定位的两种方式:</p><ul><li><p>精确定位一个元素,返回结果为一个element对象,定位不到则报错</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>xx<span class="token punctuation">,</span> value<span class="token punctuation">)</span>  <span class="token comment"># 建议使用</span>driver<span class="token punctuation">.</span>find_element_by_xxx<span class="token punctuation">(</span>value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>定位一组元素,返回结果为element对象列表,定位不到返回空列表</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">driver<span class="token punctuation">.</span>find_elements<span class="token punctuation">(</span>By<span class="token punctuation">.</span>xx<span class="token punctuation">,</span> value<span class="token punctuation">)</span>  <span class="token comment"># 建议使用</span>driver<span class="token punctuation">.</span>find_elements_by_xxx<span class="token punctuation">(</span>value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>元素定位的八种方法:</p><p>以下方法在element之后添加s就变成能够获取一组元素的方法</p><ul><li><p>By.ID  使用id值定位</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">el <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>el <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>By.XPATH 使用xpath定位</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">el <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>el <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>By.TAG_NAME. 使用标签名定位</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">el <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>TAG_NAME<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>el <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_tag_name<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>By.LINK_TEXT使用超链接文本定位</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">el <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>LINK_TEXT<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>el <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_link_text<span class="token punctuation">(</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>By.PARTIAL_LINK_TEXT  使用部分超链接文本定位</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">el <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>PARTIAL_LINK_TEXT  <span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>el <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_partial_link_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>By.NAME   使用name属性值定位</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">el <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>NAME<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>el <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>By.CLASS_NAME     使用class属性值定位</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">el <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>CLASS_NAME<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>   el <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_class_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>By.CSS_SELECTOR   使用css选择器定位</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">el <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>CSS_SELECTOR<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>  el <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_css_selector<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ol><p><strong>注意：</strong></p><ul><li><p>建议使用find_element/find_elements</p></li><li><p><code>find_element</code>和<code>find_elements</code>的区别 </p></li><li><p><code>by_link_text</code>和<code>by_partial_link_text</code>的区别：<br>全部文本和包含某个文本</p></li></ul><ul><li><p>使用： 以豆瓣为例</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> Bydriver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>implicitly_wait<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment"># 等待节点加载完成</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.douban.com/search?q=%E6%9D%B0%E6%A3%AE%E6%96%AF%E5%9D%A6%E6%A3%AE"</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># 使用id的方式获取右上角的搜索框</span><span class="token comment"># ret1 = driver.find_element(By.ID, 'inp-query')</span><span class="token comment"># ret1 = driver.find_element(By.ID, 'inp-query').send_keys("杰森斯坦森")</span><span class="token comment"># ret1 = driver.find_element_by_id("inp-query")</span><span class="token comment"># print(ret1)</span><span class="token comment"># 输出为：&lt;selenium.webdriver.remote.webelement.WebElement (session="ea6f94544ac3a56585b2638d352e97f3", element="0.5335773935305805-1")&gt;</span><span class="token comment"># 搜索输入框  使用find_elements进行获取</span><span class="token comment"># ret2 = driver.find_elements(By.ID, "inp-query")</span><span class="token comment"># ret2 = driver.find_elements_by_id("inp-query")</span><span class="token comment"># print(ret2)</span><span class="token comment">#输出为：[&lt;selenium.webdriver.remote.webelement.WebElement (session="ea6f94544ac3a56585b2638d352e97f3", element="0.5335773935305805-1")&gt;]</span><span class="token comment"># 搜索按钮  使用xpath进行获取</span><span class="token comment"># ret3 = driver.find_elements(By.XPATH, '//*[@id="inp-query"]')</span><span class="token comment"># ret3 = driver.find_elements_by_xpath("//*[@id="inp-query"]")</span><span class="token comment"># print(len(ret3))</span><span class="token comment"># print(ret3)</span><span class="token comment"># 匹配图片标签</span>ret4 <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_elements<span class="token punctuation">(</span>By<span class="token punctuation">.</span>TAG_NAME<span class="token punctuation">,</span> <span class="token string">'img'</span><span class="token punctuation">)</span><span class="token keyword">for</span> url <span class="token keyword">in</span> ret4<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#ret4 = driver.find_elements_by_tag_name("img")</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>ret4<span class="token punctuation">)</span><span class="token punctuation">)</span>ret5 <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_elements<span class="token punctuation">(</span>By<span class="token punctuation">.</span>LINK_TEXT<span class="token punctuation">,</span> <span class="token string">"浏览发现"</span><span class="token punctuation">)</span><span class="token comment"># ret5 = driver.find_elements_by_link_text("浏览发现")</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>ret5<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret5<span class="token punctuation">)</span>ret6 <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_elements<span class="token punctuation">(</span>By<span class="token punctuation">.</span>PARTIAL_LINK_TEXT<span class="token punctuation">,</span> <span class="token string">"浏览发现"</span><span class="token punctuation">)</span><span class="token comment"># ret6 = driver.find_elements_by_partial_link_text("浏览发现")</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>ret6<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 使用class名称查找</span>ret7 <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_elements<span class="token punctuation">(</span>By<span class="token punctuation">.</span>CLASS_NAME<span class="token punctuation">,</span> <span class="token string">'nbg'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret7<span class="token punctuation">)</span>driver<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>注意：</strong></p><p>find_element与find_elements区别</p><ol><li>只查找一个元素的时候:可以使用find_element(),find_elements()<br>  find_element()会返回一个WebElement节点对象,但是没找到会报错,而find_elements()不会,之后返回一个空列表</li><li>查找多个元素的时候:只能用find_elements(),返回一个列表,列表里的元素全是WebElement节点对象</li><li>找到都是节点(标签)</li><li>如果想要获取相关内容(只对find_element()有效,列表对象没有这个属性)  使用  .text</li><li>如果想要获取相关属性的值(如href对应的链接等,只对find_element()有效,列表对象没有这个属性):使用   .get_attribute(“href”)                                        </li></ol><h3 id="2、元素的操作"><a href="#2、元素的操作" class="headerlink" title="2、元素的操作"></a>2、元素的操作</h3><blockquote><p>find_element_by_xxx方法仅仅能够获取元素对象，接下来就可以对元素执行以下操作 从定位到的元素中提取数据的方法</p></blockquote><ol><li>从定位到的元素中获取数据</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">el<span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span>key<span class="token punctuation">)</span>           <span class="token comment"># 获取key属性名对应的属性值</span>el<span class="token punctuation">.</span>text                        <span class="token comment"># 获取开闭标签之间的文本内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>对定位到的元素的操作</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">el<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>                      <span class="token comment"># 对元素执行点击操作</span>el<span class="token punctuation">.</span>submit<span class="token punctuation">(</span><span class="token punctuation">)</span>                     <span class="token comment"># 对元素执行提交操作</span>el<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>                      <span class="token comment"># 清空可输入元素中的数据</span>el<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>data<span class="token punctuation">)</span>              <span class="token comment"># 向可输入元素输入数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> Bydriver <span class="token operator">=</span>webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.douban.com/"</span><span class="token punctuation">)</span><span class="token comment"># 打印页面内容 （获取到以后可以进行后续的xpath,bs4 或者存储等）</span><span class="token keyword">print</span><span class="token punctuation">(</span>driver<span class="token punctuation">.</span>page_source<span class="token punctuation">)</span>ret4 <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_elements<span class="token punctuation">(</span>By<span class="token punctuation">.</span>TAG_NAME<span class="token punctuation">,</span> <span class="token string">"h1"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret4<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token comment">#输出：豆瓣</span>ret5 <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_elements<span class="token punctuation">(</span>By<span class="token punctuation">.</span>LINK_TEXT<span class="token punctuation">,</span> <span class="token string">"下载豆瓣 App"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret5<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#输出：https://www.douban.com/doubanapp/app?channel=nimingye</span>driver<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><ol><li>根据xpath定位元素:<code>driver.find_elements(By.XPATH,"//*[@id='s']/h1/a")</code></li><li>根据class定位元素:<code>driver.find_elements(By.CLASS_NAME, "box")</code></li><li>根据link_text定位元素:<code>driver.find_elements(By.LINK_TEXT, "下载豆瓣 App")</code></li><li>根据tag_name定位元素:<code>driver.find_elements(By.TAG_NAME, "h1")</code></li><li>获取元素文本内容:<code>element.text</code></li><li>获取元素标签属性: <code>element.get_attribute("href")</code></li><li>向输入框输入数据: <code>element.send_keys(data)</code></li></ol><h2 id="四、selenium的其他操作"><a href="#四、selenium的其他操作" class="headerlink" title="四、selenium的其他操作"></a>四、selenium的其他操作</h2><h3 id="学习目标-1"><a href="#学习目标-1" class="headerlink" title="学习目标"></a>学习目标</h3><ol><li>掌握 selenium处理cookie等方法</li><li>掌握 selenium中switch的使用</li><li>掌握selenium中无头浏览器的设置</li></ol><h3 id="1、无头浏览器"><a href="#1、无头浏览器" class="headerlink" title="1、无头浏览器"></a>1、无头浏览器</h3><p>我们已经基本了解了selenium的基本使用了. 但是呢, 不知各位有没有发现, 每次打开浏览器的时间都比较长. 这就比较耗时了. 我们写的是爬虫程序. 目的是数据. 并不是想看网页. 那能不能让浏览器在后台跑呢? 答案是可以的</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver <span class="token keyword">import</span> Chrome<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>chrome<span class="token punctuation">.</span>options <span class="token keyword">import</span> Optionsopt <span class="token operator">=</span> Options<span class="token punctuation">(</span><span class="token punctuation">)</span>opt<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--headless"</span><span class="token punctuation">)</span>opt<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--disable-gpu'</span><span class="token punctuation">)</span>opt<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--window-size=4000,1600"</span><span class="token punctuation">)</span>  <span class="token comment"># 设置窗口大小</span>web <span class="token operator">=</span> Chrome<span class="token punctuation">(</span>options<span class="token operator">=</span>opt<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1、selenium-处理cookie"><a href="#1、selenium-处理cookie" class="headerlink" title="1、selenium 处理cookie"></a>1、selenium 处理cookie</h3><p>通过<code>driver.get_cookies()</code>能够获取所有的cookie</p><ul><li><p>获取cookie</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">dictCookies <span class="token operator">=</span> driver<span class="token punctuation">.</span>get_cookies<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>设置cookie</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">driver<span class="token punctuation">.</span>add_cookie<span class="token punctuation">(</span>dictCookies<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除cookue</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#删除一条cookie</span>driver<span class="token punctuation">.</span>delete_cookie<span class="token punctuation">(</span><span class="token string">"CookieName"</span><span class="token punctuation">)</span><span class="token comment"># 删除所有的cookie</span>driver<span class="token punctuation">.</span>delete_all_cookies<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="2、页面等待"><a href="#2、页面等待" class="headerlink" title="2、页面等待"></a>2、页面等待</h3><ul><li><p>为什么需要等待<br>如果网站采用了动态html技术，那么页面上的部分元素出现时间便不能确定，这个时候就可以设置一个等待时间，强制等待指定时间，等待结束之后进行元素定位，如果还是无法定位到则报错 </p></li><li><p>页面等待的三种方法</p><ul><li><p>强制等待</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> timetime<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>n<span class="token punctuation">)</span>      <span class="token comment"># 阻塞等待设定的秒数之后再继续往下执行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>显式等待(自动化web测试使用，爬虫基本不用)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>keys <span class="token keyword">import</span> Keys<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ui <span class="token keyword">import</span> WebDriverWait<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support <span class="token keyword">import</span> expected_conditions <span class="token keyword">as</span> ECWebDriverWait<span class="token punctuation">(</span>driver<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>until<span class="token punctuation">(</span> EC<span class="token punctuation">.</span>presence_of_element_located<span class="token punctuation">(</span><span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">"myDynamicElement"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 显式等待指定某个条件，然后设置最长等待时间10，在10秒内每隔0.5秒使用指定条件去定位元素，如果定位到元素则直接结束等待，如果在10秒结束之后仍未定位到元素则报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>隐式等待 隐式等待设置之后代码中的所有元素定位都会做隐式等待</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">driver<span class="token punctuation">.</span>implicitly_wait<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token comment"># 在指定的n秒内每隔一段时间尝试定位元素，如果n秒结束还未被定位出来则报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul><p><strong>注意：</strong></p><p>Selenium显示等待和隐式等待的区别<br>1、selenium的显示等待<br>原理：显示等待，就是明确要等到某个元素的出现或者是某个元素的可点击等条件，等不到，就一直等，除非在规定的时间之内都没找到，就会跳出异常Exception</p><p>(简而言之，就是直到元素出现才去操作，如果超时则报异常)</p><p>2、selenium的隐式等待</p><p>原理：隐式等待，就是在创建driver时，为浏览器对象创建一个等待时间，这个方法是得不到某个元素就等待一段时间，直到拿到某个元素位置。<br>注意：在使用隐式等待的时候，实际上浏览器会在你自己设定的时间内部断的刷新页面去寻找我们需要的元素</p><h3 id="3、switch方法切换的操作"><a href="#3、switch方法切换的操作" class="headerlink" title="3、switch方法切换的操作"></a>3、switch方法切换的操作</h3><h5 id="3-1-一个浏览器肯定会有很多窗口，所以我们肯定要有方法来实现窗口的切换。切换窗口的方法如下："><a href="#3-1-一个浏览器肯定会有很多窗口，所以我们肯定要有方法来实现窗口的切换。切换窗口的方法如下：" class="headerlink" title="3.1 一个浏览器肯定会有很多窗口，所以我们肯定要有方法来实现窗口的切换。切换窗口的方法如下："></a>3.1 一个浏览器肯定会有很多窗口，所以我们肯定要有方法来实现窗口的切换。切换窗口的方法如下：</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">也可以使用 window_handles 方法来获取每个窗口的操作对象。例如：<span class="token comment"># 1. 获取当前所有的窗口</span>current_windows <span class="token operator">=</span> driver<span class="token punctuation">.</span>window_handles<span class="token comment"># 2. 根据窗口索引进行切换</span>driver<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>window<span class="token punctuation">(</span>current_windows<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>window<span class="token punctuation">(</span>web<span class="token punctuation">.</span>window_handles<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 跳转到最后一个窗口</span>driver<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>window<span class="token punctuation">(</span>current_windows<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 回到第一个窗口</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-2-iframe是html中常用的一种技术，即一个页面中嵌套了另一个网页，selenium默认是访问不了frame中的内容的，对应的解决思路是"><a href="#3-2-iframe是html中常用的一种技术，即一个页面中嵌套了另一个网页，selenium默认是访问不了frame中的内容的，对应的解决思路是" class="headerlink" title="3.2 iframe是html中常用的一种技术，即一个页面中嵌套了另一个网页，selenium默认是访问不了frame中的内容的，对应的解决思路是"></a>3.2 iframe是html中常用的一种技术，即一个页面中嵌套了另一个网页，selenium默认是访问不了frame中的内容的，对应的解决思路是</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">driver<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>frame<span class="token punctuation">(</span>name<span class="token operator">/</span>el<span class="token operator">/</span><span class="token builtin">id</span><span class="token punctuation">)</span>     传入的参数可以使iframe对应的<span class="token builtin">id</span>值，也可以是用元素定位之后的元素对象<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>动手：qq邮箱</p><p>在使用selenium登录qq邮箱的过程中，我们会发现，无法在邮箱的登录input标签中输入内容，通过观察源码可以发现，form表单在一个frame中，所以需要切换到frame中</p><h5 id="3-3-当你触发了某个事件之后，页面出现了弹窗提示，处理这个提示或者获取提示信息方法如下："><a href="#3-3-当你触发了某个事件之后，页面出现了弹窗提示，处理这个提示或者获取提示信息方法如下：" class="headerlink" title="3.3 当你触发了某个事件之后，页面出现了弹窗提示，处理这个提示或者获取提示信息方法如下："></a>3.3 当你触发了某个事件之后，页面出现了弹窗提示，处理这个提示或者获取提示信息方法如下：</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">alert <span class="token operator">=</span> driver<span class="token punctuation">.</span>switch_to_alert<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="4-页面前进和后退"><a href="#4-页面前进和后退" class="headerlink" title="4. 页面前进和后退"></a>4. 页面前进和后退</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">driver<span class="token punctuation">.</span>forward<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment"># 前进</span>driver<span class="token punctuation">.</span>back<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 后退</span>driver<span class="token punctuation">.</span>refresh<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 刷新</span>driver<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment"># 关闭当前窗口</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5、设置浏览器最大窗口"><a href="#5、设置浏览器最大窗口" class="headerlink" title="5、设置浏览器最大窗口"></a>5、设置浏览器最大窗口</h5><pre class="line-numbers language-none"><code class="language-none">driver.maximize_window()  #最大化浏览器窗口<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4、selenium的优缺点"><a href="#4、selenium的优缺点" class="headerlink" title="4、selenium的优缺点"></a>4、selenium的优缺点</h3><ul><li>优点<ul><li>selenium能够执行页面上的js，对于js渲染的数据和模拟登陆处理起来非常容易</li><li>使用难度简单</li><li>爬取速度慢，爬取频率更像人的行为，天生能够应对一些反爬措施</li></ul></li><li>缺点<ul><li>由于selenium操作浏览器，因此会将发送所有的请求，因此占用网络带宽</li><li>由于操作浏览器，因此占用的内存非常大(相比较之前的爬虫)</li><li>速度慢，对于效率要求高的话不建议使用</li></ul></li></ul><h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><ol><li>获取cookie: <code>get_cookies()</code></li><li>删除cookie: <code>delete_all_cookies()</code></li><li>切换窗口:<code>switch_to.window()</code></li><li>切换iframe: <code>switch_to.frame()</code></li></ol><h3 id="5、selenium的配置"><a href="#5、selenium的配置" class="headerlink" title="5、selenium的配置"></a>5、selenium的配置</h3><p><a href="https://blog.csdn.net/qq_35999017/article/details/123922952">https://blog.csdn.net/qq_35999017/article/details/123922952</a></p><p><a href="https://blog.csdn.net/qq_27109535/article/details/125468643">https://blog.csdn.net/qq_27109535/article/details/125468643</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抓取m3u8视频</title>
      <link href="posts/fb481ce8.html"/>
      <url>posts/fb481ce8.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="抓取m3u8视频"><a href="#抓取m3u8视频" class="headerlink" title="抓取m3u8视频"></a>抓取m3u8视频</h1><h2 id="1、思路分析"><a href="#1、思路分析" class="headerlink" title="1、思路分析"></a>1、思路分析</h2><p>视频url：<a href="https://www.9meiju.cc/mohuankehuan/shandianxiadibaji/1-1.html">https://www.9meiju.cc/mohuankehuan/shandianxiadibaji/1-1.html</a></p><ol><li>打开网址分析当前视频是由多个片段组成还是单独一个视频 如果是一个单独视频，则找到网址，直接下载即可，如果为多个片段的视频，则需要找到片段的文件进行处理，本案例以m3u8为例</li><li>找到m3u8文件后进行下载，下载后打开文件分析是否需要秘钥，需要秘钥则根据秘钥地址进行秘钥下载，然后下载所有ts文件</li><li>合并所有视频</li></ol><h2 id="2、实现"><a href="#2、实现" class="headerlink" title="2、实现"></a>2、实现</h2><h3 id="分析index-m3u8"><a href="#分析index-m3u8" class="headerlink" title="分析index.m3u8"></a>分析index.m3u8</h3><ul><li><p>通过网络查找发现有俩个m3u8文件</p><p>url分别为</p><p><a href="https://new.qqaku.com/20211117/iHVkqQMI/index.m3u8">https://new.qqaku.com/20211117/iHVkqQMI/index.m3u8</a></p><p><a href="https://new.qqaku.com/20211117/iHVkqQMI/2523kb/hls/index.m3u8">https://new.qqaku.com/20211117/iHVkqQMI/2523kb/hls/index.m3u8</a></p><p>通过分析 第一个index.m3u8请求返回的内容中包含了第二个m3u8请求的url地址 </p><p>也就是说通过第一个index.m3u8url请求返回包含第二个index.m3u8文件地址，通过拼接请求第二个index.m3u8后 返回了包含当前所有ts文件的地址内容</p><p>现在分析出了第二个真正的index.m3u8的地址，但是第一个地址从哪里来的呢，别慌，接下来我们来查找一下第一个url是从哪里来的</p><p><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-20220708105559202.png"></p><p><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-20220708105618510.png"></p></li><li><p>查找第一个index.m3u8的url地址</p><p>打开source</p><p>发现url存在页面源代码中的js里  知道了位置，在代码中通过正则匹配就可以获取到了 </p><p>现在我们缕一下思路，通过页面源代码可以找到第一个index.m3u8的url，通过请求返回包含第二个index.m3u8文件的url内容，进行拼接，请求第二个m3u8的url，以此返回所有的ts内容</p><p><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-20220708110048589.png"></p></li></ul><h2 id="3、代码实现"><a href="#3、代码实现" class="headerlink" title="3、代码实现"></a>3、代码实现</h2><h3 id="3-1-获取最后一个m3u8的url地址"><a href="#3-1-获取最后一个m3u8的url地址" class="headerlink" title="3.1 获取最后一个m3u8的url地址"></a>3.1 获取最后一个m3u8的url地址</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> re<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> urljoin<span class="token keyword">import</span> requestsheaders <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36"</span><span class="token punctuation">}</span>session <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.9meiju.cc/'</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>url <span class="token operator">=</span> <span class="token string">'https://www.9meiju.cc/mohuankehuan/shandianxiadibaji/1-2.html'</span>response <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>response<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'UTF-8'</span>data <span class="token operator">=</span> response<span class="token punctuation">.</span>text<span class="token comment"># print(data)</span><span class="token triple-quoted-string string">'''&lt;script&gt;var zanpiancms_player = {"player":"\/public\/","url":"https:\/\/new.qqaku.com\/20211124\/nLwncbZW\/index.m3u8","next":"https:\/\/www.9meiju.cc\/mohuankehuan\/shandianxiadibaji\/1-3.html","name":"wjm3u8","apiurl":null,"adtime":"0","adurl":"","copyright":0,"danmu":{"status":0}};&lt;/script&gt;'''</span><span class="token comment"># 正则抓取上面的源代码中的m3u8的url</span>m3u8_uri <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'"url":"(.+?index.m3u8)"'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\\'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token comment"># 写入文件 分析当前的页面源代码</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'99.html'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'UTF-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token comment"># 写入response.content bytes二进制类型</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'UTF-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 请求可以获取index.m3u8文件</span>response <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>m3u8_uri<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'m3u8_uri.text'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'UTF-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token comment"># 写入response.content bytes二进制类型</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'UTF-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>response<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'UTF-8'</span>data <span class="token operator">=</span> response<span class="token punctuation">.</span>text<span class="token comment"># 拆分返回的内容获取真整的index.m3u8文件的url</span>url <span class="token operator">=</span> data<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'m3u8_uri'</span><span class="token punctuation">,</span> m3u8_uri<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>urljoin<span class="token punctuation">(</span>m3u8_uri<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-多线程下载ts文件与视频合并"><a href="#3-2-多线程下载ts文件与视频合并" class="headerlink" title="3.2  多线程下载ts文件与视频合并"></a>3.2  多线程下载ts文件与视频合并</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> requests<span class="token keyword">import</span> os<span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ThreadPoolExecutor<span class="token punctuation">,</span> waitheaders <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.75 Safari/537.36"</span><span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">down_video</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    下载ts文件    :param url:    :param i:    :return:    '''</span>    <span class="token comment"># print(url)</span>    <span class="token comment"># 下载ts文件</span>    resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'.ts'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f3<span class="token punctuation">:</span>        f3<span class="token punctuation">.</span>write<span class="token punctuation">(</span>resp<span class="token punctuation">.</span>content<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{} 下载完成！'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">download_all_videos</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    下载m3u8文件以及多线程下载ts文件    :param url:    :param path:    :return:    '''</span>    <span class="token comment"># 请求m3u8文件进行下载</span>    resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"first.m3u8"</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">"w"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>resp<span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    <span class="token comment"># 开启线程 准备下载</span>    pool <span class="token operator">=</span> ThreadPoolExecutor<span class="token punctuation">(</span>max_workers<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span>    <span class="token comment"># 1. 读取文件</span>    tasks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"first.m3u8"</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">"r"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>            <span class="token comment"># 如果不是url 则走下次循环</span>            <span class="token keyword">if</span> line<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> i<span class="token punctuation">)</span>            <span class="token comment"># 开启线程</span>            tasks<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pool<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>down_video<span class="token punctuation">,</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>            i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token comment"># 统一等待</span>    wait<span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token comment"># 处理m3u8文件中的url问题</span><span class="token keyword">def</span> <span class="token function">do_m3u8_url</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> m3u8_filename<span class="token operator">=</span><span class="token string">"index.m3u8"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 这里还没处理key的问题</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    <span class="token comment"># else:</span>        <span class="token comment"># shutil.rmtree(path)</span>        <span class="token comment"># os.mkdir(path)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>m3u8_filename<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">"r"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        data <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    fw <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span> m3u8_filename<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>    abs_path <span class="token operator">=</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span>    i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> data<span class="token punctuation">:</span>        <span class="token comment"># 如果不是url 则走下次循环</span>        <span class="token keyword">if</span> line<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># 判断处理是存在需要秘钥</span>            fw<span class="token punctuation">.</span>write<span class="token punctuation">(</span>line<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            fw<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">{</span>abs_path<span class="token punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">{</span>path<span class="token punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">{</span>i<span class="token punctuation">}</span></span><span class="token string">.ts\n'</span></span><span class="token punctuation">)</span>            i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> filename<span class="token operator">=</span><span class="token string">'output'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    进行ts文件合并 解决视频音频不同步的问题 建议使用这种    :param filePath:    :return:    '''</span>    os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    cmd <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'ffmpeg -i index.m3u8 -c copy </span><span class="token interpolation"><span class="token punctuation">{</span>filename<span class="token punctuation">}</span></span><span class="token string">.mp4'</span></span>    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># 抓取99美剧闪电侠</span>    <span class="token comment"># ts文件存储目录</span>    path <span class="token operator">=</span> <span class="token string">'ts'</span>    url <span class="token operator">=</span> <span class="token string">'https://new.qqaku.com/20211124/nLwncbZW/1100kb/hls/index.m3u8'</span>    <span class="token comment"># 下载m3u8文件以及ts文件</span>    download_all_videos<span class="token punctuation">(</span>url<span class="token punctuation">,</span> path<span class="token punctuation">)</span>    do_m3u8_url<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    <span class="token comment"># 文件合并</span>    merge<span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">'ts2'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'over'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：当前视频合并所用的工具为ffmpeg  如需安装 查看我的另外一篇博客<a href="https://www.cnblogs.com/xialigang/p/16450222.html">ffmpeg的使用</a> </p><h3 id="3-3-合并获取上面俩个代码段的代码"><a href="#3-3-合并获取上面俩个代码段的代码" class="headerlink" title="3.3 合并获取上面俩个代码段的代码"></a>3.3 合并获取上面俩个代码段的代码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> re<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> urljoin<span class="token keyword">import</span> requests<span class="token keyword">import</span> os  <span class="token comment"># 执行cmd/控制台上的命令</span><span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ThreadPoolExecutor<span class="token punctuation">,</span> wait<span class="token keyword">from</span> retrying <span class="token keyword">import</span> retry<span class="token keyword">def</span> <span class="token function">get_m3u8_url</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    获取页面中m3u8的url    :param url: 电影页面的url    :return:    '''</span>    session <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 访问首页获取cookie</span>    session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.9meiju.cc/'</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    <span class="token comment"># url = 'https://www.9meiju.cc/mohuankehuan/shandianxiadibaji/1-2.html'</span>    response <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    response<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'UTF-8'</span>    data <span class="token operator">=</span> response<span class="token punctuation">.</span>text    <span class="token comment"># print(data)</span>    m3u8_uri <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'"url":"(.+?index.m3u8)"'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\\'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    <span class="token comment"># 写入文件 分析当前的页面源代码</span>    <span class="token comment"># with open('99.html', 'w', encoding='UTF-8') as f:</span>        <span class="token comment"># 写入response.content bytes二进制类型</span>        <span class="token comment"># f.write(response.content.decode('UTF-8'))</span>    <span class="token comment"># 请求可以获取index.m3u8文件</span>    response <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>m3u8_uri<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    <span class="token comment"># with open('m3u8_uri.text', 'w', encoding='UTF-8') as f:</span>        <span class="token comment"># 写入response.content bytes二进制类型</span>        <span class="token comment"># f.write(response.content.decode('UTF-8'))</span>    response<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'UTF-8'</span>    data <span class="token operator">=</span> response<span class="token punctuation">.</span>text    <span class="token comment"># 拆分返回的内容获取真整的index.m3u8文件的url</span>    <span class="token comment"># 注意 一定要strip</span>    url <span class="token operator">=</span> data<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'m3u8_uri'</span><span class="token punctuation">,</span> m3u8_uri<span class="token punctuation">)</span>    url <span class="token operator">=</span> urljoin<span class="token punctuation">(</span>m3u8_uri<span class="token punctuation">,</span> url<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>    <span class="token keyword">return</span> url<span class="token decorator annotation punctuation">@retry</span><span class="token punctuation">(</span>stop_max_attempt_number<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">down_video</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    下载ts文件    :param url:    :param i:    :return:    '''</span>    <span class="token comment"># print(url)</span>    <span class="token comment"># 下载ts文件</span>    <span class="token comment"># try:</span>    resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'.ts'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f3<span class="token punctuation">:</span>        f3<span class="token punctuation">.</span>write<span class="token punctuation">(</span>resp<span class="token punctuation">.</span>content<span class="token punctuation">)</span>    <span class="token keyword">assert</span> resp<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token keyword">def</span> <span class="token function">download_all_videos</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    下载m3u8文件以及多线程下载ts文件    :param url:    :param path:    :return:    '''</span>    <span class="token comment"># 请求m3u8文件进行下载</span>    resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"index.m3u8"</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">"w"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>resp<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'UTF-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    <span class="token comment"># 开启线程 准备下载</span>    pool <span class="token operator">=</span> ThreadPoolExecutor<span class="token punctuation">(</span>max_workers<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span>    <span class="token comment"># 1. 读取文件</span>    tasks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"index.m3u8"</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">"r"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>            <span class="token comment"># 如果不是url 则走下次循环</span>            <span class="token keyword">if</span> line<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> i<span class="token punctuation">)</span>            <span class="token comment"># 开启线程</span>            tasks<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pool<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>down_video<span class="token punctuation">,</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>            i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token comment"># 统一等待</span>    wait<span class="token punctuation">(</span>tasks<span class="token punctuation">)</span>    <span class="token comment"># 如果阻塞可以给一个超时参数</span>    <span class="token comment"># wait(tasks, timeout=1800)</span><span class="token keyword">def</span> <span class="token function">do_m3u8_url</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> m3u8_filename<span class="token operator">=</span><span class="token string">"index.m3u8"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 这里还没处理key的问题</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    <span class="token comment"># else:</span>    <span class="token comment"># shutil.rmtree(path)</span>    <span class="token comment"># os.mkdir(path)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>m3u8_filename<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">"r"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        data <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    fw <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span> m3u8_filename<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>    abs_path <span class="token operator">=</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span>    i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> data<span class="token punctuation">:</span>        <span class="token comment"># 如果不是url 则走下次循环</span>        <span class="token keyword">if</span> line<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            fw<span class="token punctuation">.</span>write<span class="token punctuation">(</span>line<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            fw<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">{</span>abs_path<span class="token punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">{</span>path<span class="token punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">{</span>i<span class="token punctuation">}</span></span><span class="token string">.ts\n'</span></span><span class="token punctuation">)</span>            i <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> filename<span class="token operator">=</span><span class="token string">'output'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    进行ts文件合并 解决视频音频不同步的问题 建议使用这种    :param filePath:    :return:    '''</span>    os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    cmd <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'ffmpeg -i index.m3u8 -c copy </span><span class="token interpolation"><span class="token punctuation">{</span>filename<span class="token punctuation">}</span></span><span class="token string">.mp4'</span></span>    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36"</span><span class="token punctuation">}</span>    <span class="token comment"># 电影的url 返回index.m3u8的url地址</span>    url <span class="token operator">=</span> get_m3u8_url<span class="token punctuation">(</span><span class="token string">'https://www.9meiju.cc/mohuankehuan/shandianxiadibaji/1-2.html'</span><span class="token punctuation">)</span>    <span class="token comment"># ts文件存储目录</span>    path <span class="token operator">=</span> <span class="token string">'ts'</span>    <span class="token comment"># 下载m3u8文件以及ts文件</span>    download_all_videos<span class="token punctuation">(</span>url<span class="token punctuation">,</span> path<span class="token punctuation">)</span>    do_m3u8_url<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    <span class="token comment"># 文件合并</span>    merge<span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">'第二集'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'over'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、注意事项"><a href="#4、注意事项" class="headerlink" title="4、注意事项"></a>4、注意事项</h2><h3 id="4-1-说明"><a href="#4-1-说明" class="headerlink" title="4.1 说明"></a>4.1 说明</h3><p>在获取index.m3u8文件的内容时，有的文件内容会显示…jpg/png的情况，并没显示…ts，那么遇到这种情况需要单独处理 内容如下：</p><p><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-20220708111809978.png"></p><p>这种情况使用上面的代码就无法进行正常合并，合并后的视频无法播放</p><p>但使用ffprobe分析，发现识别为png，进而导致无法正常拼接</p><p><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-20220708112001167.png"></p><p><strong>在这种情况下，只需要将其中PNG文件头部分全部使用FF填充，即可处理该问题</strong></p><p>填充后的效果如图</p><p><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-20220708112029091.png"></p><h3 id="4-2-使用代码进行处理"><a href="#4-2-使用代码进行处理" class="headerlink" title="4.2 使用代码进行处理"></a>4.2 使用代码进行处理</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 解析伪装成png的ts</span><span class="token keyword">def</span> <span class="token function">resolve_ts</span><span class="token punctuation">(</span>src_path<span class="token punctuation">,</span> dst_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    如果m3u8返回的ts文件地址为    https://p1.eckwai.com/ufile/adsocial/7ead0935-dd4f-4d2f-b17d-dd9902f8cc77.png    则需要下面处理后 才能进行合并    原因在于 使用Hexeditor打开后，发现文件头被描述为了PNG    在这种情况下，只需要将其中PNG文件头部分全部使用FF填充，即可处理该问题    :return:    '''</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>dst_path<span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>dst_path<span class="token punctuation">)</span>    file_list <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>src_path<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> file_list<span class="token punctuation">:</span>        origin_ts <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>src_path<span class="token punctuation">,</span> i<span class="token punctuation">)</span>        resolved_ts <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>dst_path<span class="token punctuation">,</span> i<span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            infile <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>origin_ts<span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span>  <span class="token comment"># 打开文件</span>            outfile <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>resolved_ts<span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span>  <span class="token comment"># 内容输出</span>            data <span class="token operator">=</span> infile<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>            outfile<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span>            outfile<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span>            outfile<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">b'\xff\xff\xff\xff'</span><span class="token punctuation">)</span>            outfile<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>            infile<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 文件关闭</span>            outfile<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'resolve '</span> <span class="token operator">+</span> origin_ts <span class="token operator">+</span> <span class="token string">' success'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-完整代码"><a href="#4-3-完整代码" class="headerlink" title="4.3 完整代码"></a>4.3 完整代码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> shutil<span class="token keyword">import</span> time<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> urljoin<span class="token keyword">import</span> requests<span class="token keyword">import</span> os<span class="token keyword">import</span> re<span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ThreadPoolExecutor<span class="token punctuation">,</span> wait<span class="token keyword">def</span> <span class="token function">get_m3u8_url</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    获取页面中m3u8的url    :param url: 电影页面的url    :return:    '''</span>    session <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 访问首页获取cookie</span>    session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.9meiju.cc/'</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    <span class="token comment"># url = 'https://www.9meiju.cc/mohuankehuan/shandianxiadibaji/1-2.html'</span>    response <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    response<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'UTF-8'</span>    data <span class="token operator">=</span> response<span class="token punctuation">.</span>text    <span class="token comment"># print(data)</span>    m3u8_uri <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'"url":"(.+?index.m3u8)"'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\\'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    <span class="token comment"># 请求可以获取index.m3u8文件</span>    response <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>m3u8_uri<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    response<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'UTF-8'</span>    data <span class="token operator">=</span> response<span class="token punctuation">.</span>text    <span class="token comment"># 拆分返回的内容获取真整的index.m3u8文件的url</span>    <span class="token comment"># 注意 一定要strip</span>    url <span class="token operator">=</span> data<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'m3u8_uri'</span><span class="token punctuation">,</span> m3u8_uri<span class="token punctuation">)</span>    url <span class="token operator">=</span> urljoin<span class="token punctuation">(</span>m3u8_uri<span class="token punctuation">,</span> url<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>    <span class="token keyword">return</span> url<span class="token keyword">def</span> <span class="token function">down_video</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    下载ts文件    :param url:    :param i:    :return:    '''</span>    <span class="token comment"># print(url)</span>    <span class="token comment"># 下载ts文件</span>    resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'.ts'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f3<span class="token punctuation">:</span>        f3<span class="token punctuation">.</span>write<span class="token punctuation">(</span>resp<span class="token punctuation">.</span>content<span class="token punctuation">)</span>    <span class="token comment"># print('{} 下载完成！'.format(url))</span><span class="token keyword">def</span> <span class="token function">download_all_videos</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    下载m3u8文件以及多线程下载ts文件    :param url:    :param path:    :return:    '''</span>    <span class="token comment"># 请求m3u8文件进行下载</span>    resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"index.m3u8"</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">"w"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>resp<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'UTF-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    <span class="token comment"># 开启线程 准备下载</span>    pool <span class="token operator">=</span> ThreadPoolExecutor<span class="token punctuation">(</span>max_workers<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span>    <span class="token comment"># 1. 读取文件</span>    tasks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"index.m3u8"</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">"r"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>            <span class="token comment"># 如果不是url 则走下次循环</span>            <span class="token keyword">if</span> line<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> i<span class="token punctuation">)</span>            <span class="token comment"># 开启线程</span>            tasks<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pool<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>down_video<span class="token punctuation">,</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>            i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token comment"># 统一等待</span>    wait<span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token comment"># 解析伪装成png的ts</span><span class="token keyword">def</span> <span class="token function">resolve_ts</span><span class="token punctuation">(</span>src_path<span class="token punctuation">,</span> dst_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    如果m3u8返回的ts文件地址为    https://p1.eckwai.com/ufile/adsocial/7ead0935-dd4f-4d2f-b17d-dd9902f8cc77.png    则需要下面处理后 才能进行合并    原因在于 使用Hexeditor打开后，发现文件头被描述为了PNG    在这种情况下，只需要将其中PNG文件头部分全部使用FF填充，即可处理该问题    :return:    '''</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>dst_path<span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>dst_path<span class="token punctuation">)</span>    file_list <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>src_path<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> file_list<span class="token punctuation">:</span>        origin_ts <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>src_path<span class="token punctuation">,</span> i<span class="token punctuation">)</span>        resolved_ts <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>dst_path<span class="token punctuation">,</span> i<span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            infile <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>origin_ts<span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span>  <span class="token comment"># 打开文件</span>            outfile <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>resolved_ts<span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span>  <span class="token comment"># 内容输出</span>            data <span class="token operator">=</span> infile<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>            outfile<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span>            outfile<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span>            outfile<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">b'\xff\xff\xff\xff'</span><span class="token punctuation">)</span>            outfile<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>            infile<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 文件关闭</span>            outfile<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span>        <span class="token triple-quoted-string string">"""        else:            # 删除目录            shutil.rmtree(src_path)            # 将副本重命名为正式文件            os.rename(dst_path, dst_path.rstrip('2'))        """</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'resolve '</span> <span class="token operator">+</span> origin_ts <span class="token operator">+</span> <span class="token string">' success'</span><span class="token punctuation">)</span><span class="token comment"># 处理m3u8文件中的url问题</span><span class="token keyword">def</span> <span class="token function">do_m3u8_url</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> m3u8_filename<span class="token operator">=</span><span class="token string">"index.m3u8"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 这里还没处理key的问题</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>m3u8_filename<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">"r"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        data <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    fw <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span> m3u8_filename<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>    abs_path <span class="token operator">=</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span>    i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> data<span class="token punctuation">:</span>        <span class="token comment"># 如果不是url 则走下次循环</span>        <span class="token keyword">if</span> line<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            fw<span class="token punctuation">.</span>write<span class="token punctuation">(</span>line<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            fw<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">{</span>abs_path<span class="token punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">{</span>path<span class="token punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">{</span>i<span class="token punctuation">}</span></span><span class="token string">.ts\n'</span></span><span class="token punctuation">)</span>            i <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> filename<span class="token operator">=</span><span class="token string">'output'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    进行ts文件合并 解决视频音频不同步的问题 建议使用这种    :param filePath:    :return:    '''</span>    os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    cmd <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'ffmpeg -i index.m3u8 -c copy </span><span class="token interpolation"><span class="token punctuation">{</span>filename<span class="token punctuation">}</span></span><span class="token string">.mp4'</span></span>    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.75 Safari/537.36"</span>    <span class="token punctuation">}</span>    url <span class="token operator">=</span> get_m3u8_url<span class="token punctuation">(</span><span class="token string">'https://www.9meiju.cc/mohuankehuan/shandianxiadibaji/1-20.html'</span><span class="token punctuation">)</span>    <span class="token comment"># 抓取99美剧闪电侠</span>    <span class="token comment"># ts文件存储目录</span>    path <span class="token operator">=</span> <span class="token string">'ts'</span>    <span class="token comment"># 下载m3u8文件以及ts文件</span>    download_all_videos<span class="token punctuation">(</span>url<span class="token punctuation">,</span> path<span class="token punctuation">)</span>    <span class="token comment"># 合并png的ts文件</span>    src_path <span class="token operator">=</span> path    dst_path <span class="token operator">=</span> path<span class="token operator">+</span><span class="token string">'2'</span>    resolve_ts<span class="token punctuation">(</span>src_path<span class="token punctuation">,</span> dst_path<span class="token punctuation">)</span>    do_m3u8_url<span class="token punctuation">(</span>dst_path<span class="token punctuation">)</span>    merge<span class="token punctuation">(</span>dst_path<span class="token punctuation">,</span> <span class="token string">'闪电侠'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'over'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5、解密处理"><a href="#5、解密处理" class="headerlink" title="5、解密处理"></a>5、解密处理</h2><ul><li><p>上面我们讲的是没有经过加密的 ts 文件，这些文件下载后直接可以播放，但经过AES-128加密后的文件下载后会无法播放，所以还需要进行解密。</p></li><li><p>如何判断是否需要加密？观察视频网站是否有m3u8的文件传输，下载下来并打开：</p><p>无需解密index.m3u8文件</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#EXTM3U</span><span class="token comment">#EXT-X-VERSION:3</span><span class="token comment">#EXT-X-TARGETDURATION:4</span><span class="token comment">#EXT-X-PLAYLIST-TYPE:VOD</span><span class="token comment">#EXT-X-MEDIA-SEQUENCE:0</span><span class="token comment">#EXTINF:3.086,</span>https<span class="token punctuation">:</span><span class="token operator">//</span>hey05<span class="token punctuation">.</span>cjkypo<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token number">20211215</span><span class="token operator">/</span>FMbNtNzz<span class="token operator">/</span>1100kb<span class="token operator">/</span>hls<span class="token operator">/</span>7qs6gJc0<span class="token punctuation">.</span>ts<span class="token comment">#EXTINF:2.085,</span>https<span class="token punctuation">:</span><span class="token operator">//</span>hey05<span class="token punctuation">.</span>cjkypo<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token number">20211215</span><span class="token operator">/</span>FMbNtNzz<span class="token operator">/</span>1100kb<span class="token operator">/</span>hls<span class="token operator">/</span>rYpHhq0I<span class="token punctuation">.</span>ts<span class="token comment">#EXTINF:2.085,</span>https<span class="token punctuation">:</span><span class="token operator">//</span>hey05<span class="token punctuation">.</span>cjkypo<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token number">20211215</span><span class="token operator">/</span>FMbNtNzz<span class="token operator">/</span>1100kb<span class="token operator">/</span>hls<span class="token operator">/</span>bfays5sw<span class="token punctuation">.</span>ts<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要解密index.m3u8文件</p><p>index.m3u8：<a href="https://s7.fsvod1.com/20220622/5LnZiDXn/index.m3u8">https://s7.fsvod1.com/20220622/5LnZiDXn/index.m3u8</a></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#EXT-X-VERSION:3</span><span class="token comment">#EXT-X-TARGETDURATION:1</span><span class="token comment">#EXT-X-PLAYLIST-TYPE:VOD</span><span class="token comment">#EXT-X-MEDIA-SEQUENCE:0</span><span class="token comment">#EXT-X-KEY:METHOD=AES-128,URI="/20220418/671fJxOB/2000kb/hls/key.key" # 当前路径为解密秘钥的位置  需要使用代码拼凑成完整路径 进行请求 域名+/20220418/671fJxOB/2000kb/hls/key.key</span><span class="token comment">#EXTINF:1.235,</span><span class="token operator">/</span><span class="token number">20220418</span><span class="token operator">/</span>671fJxOB<span class="token operator">/</span>2000kb<span class="token operator">/</span>hls<span class="token operator">/</span>kj6uqHoP<span class="token punctuation">.</span>ts  <span class="token comment"># 并且这里ts的url也要拼凑完整</span><span class="token comment">#EXTINF:1.001,</span><span class="token operator">/</span><span class="token number">20220418</span><span class="token operator">/</span>671fJxOB<span class="token operator">/</span>2000kb<span class="token operator">/</span>hls<span class="token operator">/</span>ZXX8LYPa<span class="token punctuation">.</span>ts<span class="token comment">#EXTINF:1.001,</span><span class="token operator">/</span><span class="token number">20220418</span><span class="token operator">/</span>671fJxOB<span class="token operator">/</span>2000kb<span class="token operator">/</span>hls<span class="token operator">/</span>sOezpD2H<span class="token punctuation">.</span>ts<span class="token comment">#EXTINF:1.001,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果你的文件是加密的，那么你还需要一个key文件，Key文件下载的方法和m3u8文件类似，如下所示 key.key 就是我们需要下载的 key 文件，并注意这里 m3u8 有2个，需要使用的是像上面一样存在 ts 文件超链接的 m3u8 文件</p></li><li><p><strong>下载所有 ts 文件</strong>，将下载好的所有的 ts 文件、m3u8、key.key 放到一个文件夹中，将 m3u8 文件改名为 index.m3u8，将 key.key 改名为 key.m3u8 。更改 index.m3u8 里的 URL，变为你本地路径的 key 文件，将所有 ts 也改为你本地的路径</p><p>文件路径</p><blockquote><p>project/</p><p>​        ts/</p><p>​            0.ts</p><p>​            1.ts</p><p>​            …</p><p>​            index.m3u8</p><p>​            key.m3u8</p></blockquote><p>修改后的index.m3u8内容如下所示：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#EXTM3U</span><span class="token comment">#EXT-X-VERSION:3</span><span class="token comment">#EXT-X-TARGETDURATION:1</span><span class="token comment">#EXT-X-PLAYLIST-TYPE:VOD</span><span class="token comment">#EXT-X-MEDIA-SEQUENCE:0</span><span class="token comment">#EXT-X-KEY:METHOD=AES-128,URI="/Users/xialigang/PycharmProjects/爬虫/抓取带秘钥的电影/ts/key.m3u8"</span><span class="token comment">#EXTINF:1.235,</span><span class="token operator">/</span>Users<span class="token operator">/</span>xialigang<span class="token operator">/</span>PycharmProjects<span class="token operator">/</span>爬虫<span class="token operator">/</span>抓取带秘钥的电影<span class="token operator">/</span>ts<span class="token operator">/</span><span class="token number">0.</span>ts<span class="token comment">#EXTINF:1.001,</span><span class="token operator">/</span>Users<span class="token operator">/</span>xialigang<span class="token operator">/</span>PycharmProjects<span class="token operator">/</span>爬虫<span class="token operator">/</span>抓取带秘钥的电影<span class="token operator">/</span>ts<span class="token operator">/</span><span class="token number">1.</span>ts<span class="token comment">#EXTINF:1.001,</span><span class="token operator">/</span>Users<span class="token operator">/</span>xialigang<span class="token operator">/</span>PycharmProjects<span class="token operator">/</span>爬虫<span class="token operator">/</span>抓取带秘钥的电影<span class="token operator">/</span>ts<span class="token operator">/</span><span class="token number">2.</span>ts<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>处理index.m3u8内容的代码如下所示</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> urljoin<span class="token keyword">import</span> requests<span class="token keyword">import</span> os<span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ThreadPoolExecutor<span class="token punctuation">,</span> wait<span class="token keyword">import</span> reheaders <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.75 Safari/537.36"</span><span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">down_video</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''  下载ts文件  :param url:  :param i:  :return:  '''</span>  <span class="token comment"># print(url)</span>  <span class="token comment"># 下载ts文件</span>  resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>  <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.ts'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f3<span class="token punctuation">:</span>      f3<span class="token punctuation">.</span>write<span class="token punctuation">(</span>resp<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token comment"># print('{} 下载完成！'.format(url))</span><span class="token keyword">def</span> <span class="token function">download_all_videos</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> host<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token triple-quoted-string string">'''  下载m3u8文件以及多线程下载ts文件  :param url:  :param path:  :return:  '''</span>  <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>      os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span>  <span class="token comment"># 开启线程 准备下载</span>  pool <span class="token operator">=</span> ThreadPoolExecutor<span class="token punctuation">(</span>max_workers<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span>  <span class="token comment"># 1. 读取文件</span>  tasks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  i <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"index.m3u8"</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">"r"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>      <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>          <span class="token comment"># 如果不是url 则走下次循环</span>          <span class="token keyword">if</span> line<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>              <span class="token keyword">continue</span>          line <span class="token operator">=</span> host <span class="token operator">+</span> line          <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> i<span class="token punctuation">)</span>          <span class="token comment"># 开启线程</span>          tasks<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pool<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>down_video<span class="token punctuation">,</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>          i <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment"># 统一等待</span>  wait<span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token comment"># 处理m3u8文件中的url问题</span><span class="token keyword">def</span> <span class="token function">do_m3u8url</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> path<span class="token punctuation">,</span> m3u8filename<span class="token operator">=</span><span class="token string">"index.m3u8"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 这里还没处理key的问题</span>  <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>      os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span>  <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>m3u8_filename<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">"r"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>      data <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>  fw <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span> m3u8_filename<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>  abs_path <span class="token operator">=</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span>  i <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">for</span> line <span class="token keyword">in</span> data<span class="token punctuation">:</span>      <span class="token comment"># 如果不是url 则走下次循环</span>      <span class="token keyword">if</span> line<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token comment"># 判断处理是存在需要秘钥</span>          <span class="token keyword">if</span> line<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'URI'</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>              line <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">'(#EXT-X-KEY:METHOD=AES-128,URI=")(.*?)"'</span><span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f'\\1</span><span class="token interpolation"><span class="token punctuation">{</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>abs_path<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">/key.m3u8"'</span></span><span class="token punctuation">,</span>                            line<span class="token punctuation">)</span>              host <span class="token operator">=</span> url<span class="token punctuation">.</span>rsplit<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>              <span class="token comment"># 爬取key</span>              download_m3u8<span class="token punctuation">(</span>host <span class="token operator">+</span> <span class="token string">'/key.key'</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">'key.m3u8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          fw<span class="token punctuation">.</span>write<span class="token punctuation">(</span>line<span class="token punctuation">)</span>      <span class="token keyword">else</span><span class="token punctuation">:</span>          fw<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">{</span>abs_path<span class="token punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">{</span>path<span class="token punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">{</span>i<span class="token punctuation">}</span></span><span class="token string">.ts\n'</span></span><span class="token punctuation">)</span>          i <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">download_m3u8</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> m3u8_filename<span class="token operator">=</span><span class="token string">"index.m3u8"</span><span class="token punctuation">,</span> state<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'正在下载index.m3u8文件'</span><span class="token punctuation">)</span>  resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>  <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>m3u8_filename<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">"w"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>      f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>resp<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> filename<span class="token operator">=</span><span class="token string">'output'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''  进行ts文件合并 解决视频音频不同步的问题 建议使用这种  :param filePath:  :return:  '''</span>  os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span>  cmd <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'ffmpeg -i index.m3u8 -c copy </span><span class="token interpolation"><span class="token punctuation">{</span>filename<span class="token punctuation">}</span></span><span class="token string">.mp4'</span></span>  os<span class="token punctuation">.</span>system<span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_m3u8data</span><span class="token punctuation">(</span>first_m3u8url<span class="token punctuation">)</span><span class="token punctuation">:</span>  session <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 请求第一次m3u8de url</span>  resp <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>first_m3u8_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>  resp<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'UTF-8'</span>  data <span class="token operator">=</span> resp<span class="token punctuation">.</span>text  <span class="token comment"># 第二次请求m3u8文件地址 返回最终包含所有ts文件的m3u8</span>  second_m3u8_url <span class="token operator">=</span> urljoin<span class="token punctuation">(</span>first_m3u8_url<span class="token punctuation">,</span> data<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  resp <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>second_m3u8_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>  <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'index.m3u8'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>      f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>resp<span class="token punctuation">.</span>content<span class="token punctuation">)</span>  <span class="token keyword">return</span> second_m3u8_url<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>  <span class="token comment"># ts文件存储目录</span>  path <span class="token operator">=</span> <span class="token string">'ts'</span>  <span class="token comment"># 带加密的ts文件的 index.m3u8  url</span>  url <span class="token operator">=</span> <span class="token string">'https://s7.fsvod1.com/20220622/5LnZiDXn/index.m3u8'</span>  meu8_url <span class="token operator">=</span> get_m3u8_data<span class="token punctuation">(</span>url<span class="token punctuation">)</span>  <span class="token comment"># 下载m3u8文件以及ts文件</span>  host <span class="token operator">=</span> <span class="token string">'https://s7.fsvod1.com'</span>   <span class="token comment"># 主机地址  用于拼凑完整的ts路径和秘钥路径</span>  download_all_videos<span class="token punctuation">(</span>path<span class="token punctuation">,</span> host<span class="token punctuation">)</span>  do_m3u8_url<span class="token punctuation">(</span>meu8_url<span class="token punctuation">,</span> path<span class="token punctuation">)</span>  <span class="token comment"># 文件合并</span>  merge<span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">'奇异博士'</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'over'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>这样就大功告成了！我们成功解密并使用 ffmpeg 合并了这些 ts 视频片段，实际应用场景可能和这不一样，具体网站具体分析</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Anaconda的使用</title>
      <link href="posts/ea2dc9b0.html"/>
      <url>posts/ea2dc9b0.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>​        最近在学习机器学习相关的内容，主要是安装GPU版本的Pytorch，总是失败，在网上检索查询发现是pip和Anaconda的环境竟然是天差地别。Anaconda是一个包管理器，可以理解为一个工具，它自带Python（可随意选择版本）解释器以及一些数据分析与挖掘需要的模块而无需用户手动添加的一些常用模块。早期学习Python并没有觉得手动安装包或者模块有多难，后来接触项目的时候才发现了Anaconda的最核心功能。</p><p>​        Anaconda的核心功能在于环境管理，它可以创建虚拟环境，虚拟环境可以拥有自己的Python解释器和一些其他的包的模块，这对我们在实验不同项目环境时候切换自己的环境。Anaconda的虚拟环境保存在安装路径的envs文件夹下，相关的Python解释器和安装的模块都在这个路径下。</p><hr><h3 id="一、检查版本和环境："><a href="#一、检查版本和环境：" class="headerlink" title="一、检查版本和环境："></a>一、检查版本和环境：</h3><blockquote><p>打开Anaconda Prompt</p></blockquote><p><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/20221126122619.png"></p><blockquote><p>查看安装的版本：</p></blockquote><p><code>conda --version</code></p><blockquote><p>查看已经安装的环境：</p></blockquote><p><code>conda env list</code></p><p><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/20221126122544.png"></p><hr><h3 id="二、创建环境："><a href="#二、创建环境：" class="headerlink" title="二、创建环境："></a>二、创建环境：</h3><blockquote><p>表示创建一个名字为test_env的环境：（这里环境用的python版本是 3.9版本的）</p></blockquote><p><code>conda create -n test_env python=3.9</code></p><p>创建成功后可以输入<code>conda env list</code>查看是否创建成功</p><blockquote><p>进入环境：</p></blockquote><p>Windows: <code>activate test_env</code></p><p>Linux下：<code>conda activate test_env</code></p><p>进入之后就可以安装需要的包了</p><p><code>pip install xxxxx</code></p><p><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/20221126124509.png"></p><hr><h3 id="三、删除环境："><a href="#三、删除环境：" class="headerlink" title="三、删除环境："></a>三、删除环境：</h3><blockquote><p>删除环境指令：</p></blockquote><p><code>conda remove -n test_env --all</code></p><hr><p><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/20221126124803.png"></p><h3 id="四、复制环境："><a href="#四、复制环境：" class="headerlink" title="四、复制环境："></a>四、复制环境：</h3><blockquote><p>复制环境指令：</p></blockquote><p><code>conda create --name new_env_name --clone copied_env_name</code></p><hr><h3 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h3><p><a href="https://blog.csdn.net/m0_55674689/article/details/125591647">https://blog.csdn.net/m0_55674689/article/details/125591647</a></p><p><a href="https://blog.csdn.net/weixin_43216928/article/details/117079124">https://blog.csdn.net/weixin_43216928/article/details/117079124</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Anaconda </tag>
            
            <tag> Python </tag>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原神获取ck和sk</title>
      <link href="posts/19850a30.html"/>
      <url>posts/19850a30.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h3><blockquote><p>如何获取Cookies？（2022.12.29更新）</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> cookie<span class="token operator">=</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">;</span><span class="token keyword">var</span> Str_Num <span class="token operator">=</span> cookie<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'_MHYUUID='</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cookie <span class="token operator">=</span><span class="token string">'添加 '</span><span class="token operator">+</span>cookie<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>Str_Num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> ask<span class="token operator">=</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">'Cookie:'</span><span class="token operator">+</span>cookie<span class="token operator">+</span><span class="token string">'\n\n按确认，然后粘贴发送给机器人'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ask<span class="token operator">==</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">copy</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>msg<span class="token operator">=</span>cookie<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>msg<span class="token operator">=</span><span class="token string">'Cancel'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>1.复制上面全部代码，然后用Chrome浏览器的无痕模式打开<a href="https://user.mihoyo.com/#/login">https://user.mihoyo.com/#/login</a><br><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/20220927001031.png"><br>2.在页面上右键检查或者Ctrl+Shift+i<br>3.选择控制台（Console），粘贴，回车，在弹出的窗口点确认（点完自动复制）<br><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/20220927000248.png"><br>4.然后在和机器人的私聊窗口，粘贴发送即可  </p><hr><blockquote><p>如何获取Stoken？</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> cookie <span class="token operator">=</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">;</span><span class="token keyword">var</span> ask <span class="token operator">=</span> <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">'Cookie:'</span> <span class="token operator">+</span> cookie <span class="token operator">+</span> <span class="token string">'\n\n按确认，然后粘贴发送给机器人'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ask <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">copy</span><span class="token punctuation">(</span><span class="token string">"添加 stoken"</span> <span class="token operator">+</span> cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>  msg <span class="token operator">=</span> cookie<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  msg <span class="token operator">=</span> <span class="token string">'Cancel'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1.复制上面全部代码（和第一个Cookies代码不一样，记得重新复制一次），然后用Chrome浏览器的无痕模式打开<a href="http://user.mihoyo.com/">http://user.mihoyo.com/</a><br><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/20220927001031.png"><br>2.在页面上右键检查或者Ctrl+Shift+i<br>3.选择控制台（Console），粘贴，回车，在弹出的窗口点确认（点完自动复制）<br><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/20220927000248.png"><br>4.然后在和机器人的私聊窗口，粘贴发送即可  </p><h4 id="警告：Cookies、Stoken属于个人隐私，其效用相当于账号密码，请勿随意公开！"><a href="#警告：Cookies、Stoken属于个人隐私，其效用相当于账号密码，请勿随意公开！" class="headerlink" title="警告：Cookies、Stoken属于个人隐私，其效用相当于账号密码，请勿随意公开！"></a>警告：Cookies、Stoken属于个人隐私，其效用相当于账号密码，请勿随意公开！</h4><hr><p>PS：<br>向机器人发送<code>绑定信息</code>，可以查看绑定状态。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 说明 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL手册</title>
      <link href="posts/4db2237b.html"/>
      <url>posts/4db2237b.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="MySQL修改密码："><a href="#MySQL修改密码：" class="headerlink" title="MySQL修改密码："></a>MySQL修改密码：</h3><blockquote><p>使用mysqladmin修改密码</p></blockquote><p>使用 mysqladmin 命令修改 MySQL 的 root 用户密码格式为 <code>mysqladmin -u用户名 -p旧密码 password 新密码</code><br><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/20220925110132.png"></p><p><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-20221220182007480.png"></p><hr><h3 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h3>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xpath笔记</title>
      <link href="posts/d2d40360.html"/>
      <url>posts/d2d40360.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="xpath"><a href="#xpath" class="headerlink" title="xpath"></a>xpath</h1><h3 id="1、xpath安装与使用"><a href="#1、xpath安装与使用" class="headerlink" title="1、xpath安装与使用"></a>1、xpath安装与使用</h3><p><strong>安装</strong></p><ul><li><p>安装lxml库</p><p>pip install lxml  -i pip源</p></li></ul><p>常用pip源：<br>清华大学 ：<code>https://pypi.tuna.tsinghua.edu.cn/simple/</code><br>阿里云：<code>http://mirrors.aliyun.com/pypi/simple/</code><br>中国科学技术大学 ：<code>http://pypi.mirrors.ustc.edu.cn/simple/</code><br>华中科技大学：<code>http://pypi.hustunique.com/</code><br>豆瓣源：<code>http://pypi.douban.com/simple/</code><br>腾讯源：<code>http://mirrors.cloud.tencent.com/pypi/simple</code><br>华为镜像源：<code>https://repo.huaweicloud.com/repository/pypi/simple/</code></p><h3 id="2、解析流程与使用"><a href="#2、解析流程与使用" class="headerlink" title="2、解析流程与使用"></a>2、解析流程与使用</h3><p><strong>解析流程</strong></p><ul><li>实例化一个etree的对象，把即将被解析的页面源码加载到该对象</li><li>调用该对象的xpath方法结合着不同形式的xpath表达进行标签定位和数据提取</li></ul><p><strong>使用</strong></p><ul><li><p>导入lxml.etree</p><p>from lxml import etree</p></li><li><p>etree.parse()</p><p>解析本地html文件</p><p>html_tree = etree.parse(‘XX.html’)</p></li><li><p>etree.HTML()(建议)</p><p>解析网络的html字符串</p><p>html_tree = etree.HTML(html字符串)</p></li><li><p>html_tree.xpath()</p><p>使用xpath路径查询信息，返回一个列表</p></li></ul><p>注意：如果lxml解析本地HTML文件报错可以安装如下添加参数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">parser <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTMLParser<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>selector <span class="token operator">=</span> etree<span class="token punctuation">.</span>parse<span class="token punctuation">(</span><span class="token string">'./lol_1.html'</span><span class="token punctuation">,</span>parser<span class="token operator">=</span>parser<span class="token punctuation">)</span>result<span class="token operator">=</span>etree<span class="token punctuation">.</span>tostring<span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3、xpath语法"><a href="#3、xpath语法" class="headerlink" title="3、xpath语法"></a>3、xpath语法</h3><p>XPath 是一门在 XML 文档中查找信息的语言。XPath 用于在 XML 文档中通过元素和属性进行导航。</p><ul><li><p><strong>路径表达式</strong></p><table><thead><tr><th align="left">表达式</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">/</td><td align="left">从根节点选取。</td></tr><tr><td align="left">//</td><td align="left">从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置。</td></tr><tr><td align="left">./</td><td align="left">当前节点再次进行xpath</td></tr><tr><td align="left">@</td><td align="left">选取属性。</td></tr></tbody></table><p><strong>实例</strong></p><p>在下面的表格中，我们已列出了一些路径表达式以及表达式的结果：</p><table><thead><tr><th align="left">路径表达式</th><th align="left">结果</th></tr></thead><tbody><tr><td align="left">/html</td><td align="left">选取根元素。注释：假如路径起始于正斜杠( / )，则此路径始终代表到某元素的绝对路径！</td></tr><tr><td align="left">//li</td><td align="left">选取所有li 子元素，而不管它们在文档中的位置。</td></tr><tr><td align="left">//ul//li</td><td align="left">选择属于 ul元素的后代的所有 li元素，而不管它们位于 ul之下的什么位置。</td></tr><tr><td align="left">节点对象.xpath(‘./div’)</td><td align="left">选择当前节点对象里面的第一个div节点</td></tr><tr><td align="left">//@href</td><td align="left">选取名为 href 的所有属性。</td></tr></tbody></table></li><li><p><strong>谓语（Predicates）</strong></p><p>谓语用来查找某个特定的节点或者包含某个指定的值的节点。</p><p>谓语被嵌在方括号中。</p><p><strong>实例</strong></p><p>在下面的表格中，我们列出了带有谓语的一些路径表达式，以及表达式的结果：</p><table><thead><tr><th align="left">路径表达式</th><th align="left">结果</th></tr></thead><tbody><tr><td align="left">/ul/li[1]</td><td align="left">选取属于 ul子元素的第一个 li元素。</td></tr><tr><td align="left">/ul/li[last()]</td><td align="left">选取属于 ul子元素的最后一个 li元素。</td></tr><tr><td align="left">/ul/li[last()-1]</td><td align="left">选取属于 ul子元素的倒数第二个 li元素。</td></tr><tr><td align="left">//ul/li[position()&lt;3]</td><td align="left">选取最前面的两个属于 ul元素的子元素的 li元素。</td></tr><tr><td align="left">//a[@title]</td><td align="left">选取所有拥有名为 title的属性的 a元素。</td></tr><tr><td align="left">//a[@title=’xx’]</td><td align="left">选取所有 a元素，且这些元素拥有值为 xx的 title属性。</td></tr><tr><td align="left">//a[@title&gt;10]   <code>&gt; &lt; &gt;= &lt;= !=</code></td><td align="left">选取 a元素的所有 title元素，且其中的 title元素的值须大于 10。</td></tr><tr><td align="left">/bookstore/book[price&gt;35.00]/title</td><td align="left">选取 bookstore 元素中的 book 元素的所有 title 元素，且其中的 price 元素的值须大于 35.00。</td></tr></tbody></table></li><li><p><strong>选取未知节点</strong></p><p>XPath 通配符可用来选取未知的 XML 元素。</p><table><thead><tr><th align="left">通配符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">*</td><td align="left">匹配任何元素节点。  一般用于浏览器copy xpath会出现</td></tr><tr><td align="left">@*</td><td align="left">匹配任何属性节点。</td></tr><tr><td align="left">node()</td><td align="left">匹配任何类型的节点。</td></tr></tbody></table><p><strong>实例</strong></p><p>在下面的表格中，我们列出了一些路径表达式，以及这些表达式的结果：</p><table><thead><tr><th align="left">路径表达式</th><th align="left">结果</th></tr></thead><tbody><tr><td align="left">/ul/*</td><td align="left">选取 ul元素的所有子元素。</td></tr><tr><td align="left">//*</td><td align="left">选取文档中的所有元素。</td></tr><tr><td align="left">//title[@*]</td><td align="left">选取所有带有属性的 title 元素。</td></tr><tr><td align="left">//node()</td><td align="left">获取所有节点</td></tr></tbody></table><p><strong>选取若干路径</strong></p><p>通过在路径表达式中使用“|”运算符，您可以选取若干个路径。</p><p><strong>实例</strong></p><p>在下面的表格中，我们列出了一些路径表达式，以及这些表达式的结果：</p><table><thead><tr><th align="left">路径表达式</th><th align="left">结果</th></tr></thead><tbody><tr><td align="left">//book/title | //book/price</td><td align="left">选取 book 元素的所有 title 和 price 元素。</td></tr><tr><td align="left">//title | //price</td><td align="left">选取文档中的所有 title 和 price 元素。</td></tr><tr><td align="left">/bookstore/book/title | //price</td><td align="left">选取属于 bookstore 元素的 book 元素的所有 title 元素，以及文档中所有的 price 元素。</td></tr></tbody></table></li><li><p>逻辑运算</p><ul><li><p>查找所有id属性等于head并且class属性等于s_down的div标签</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">//</span>div<span class="token punctuation">[</span>@<span class="token builtin">id</span><span class="token operator">=</span><span class="token string">"head"</span> <span class="token keyword">and</span> @<span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"s_down"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>选取文档中的所有 title 和 price 元素。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">//</span>title <span class="token operator">|</span> <span class="token operator">//</span>price<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意: “|”两边必须是完整的xpath路径</p></li></ul></li><li><p>属性查询</p><ul><li><p>查找所有包含id属性的div节点</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">//</span>div<span class="token punctuation">[</span>@<span class="token builtin">id</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查找所有id属性等于maincontent的div标签</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">//</span>div<span class="token punctuation">[</span>@<span class="token builtin">id</span><span class="token operator">=</span><span class="token string">"maincontent"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查找所有的class属性</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">//</span>@<span class="token keyword">class</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>//@attrName</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">//</span>li<span class="token punctuation">[</span>@name<span class="token operator">=</span><span class="token string">"xx"</span><span class="token punctuation">]</span><span class="token operator">//</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 获取li标签name为xx的里面的文本内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>获取第几个标签  索引从1开始</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//li[1]/a/text()'</span><span class="token punctuation">)</span>  <span class="token comment"># 获取第一个</span>tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//li[last()]/a/text()'</span><span class="token punctuation">)</span>  <span class="token comment"># 获取最后一个</span>tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//li[last()-1]/a/text()'</span><span class="token punctuation">)</span>  <span class="token comment"># 获取倒数第二个</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>模糊查询</p><ul><li><p>查询所有id属性中包含he的div标签</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">//</span>div<span class="token punctuation">[</span>contains<span class="token punctuation">(</span>@<span class="token builtin">id</span><span class="token punctuation">,</span> <span class="token string">"he"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查询所有id属性中包以he开头的div标签</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">//</span>div<span class="token punctuation">[</span>starts<span class="token operator">-</span><span class="token keyword">with</span><span class="token punctuation">(</span>@<span class="token builtin">id</span><span class="token punctuation">,</span> <span class="token string">"he"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>内容查询</p><p>查找所有div标签下的直接子节点h1的内容</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">//</span>div<span class="token operator">/</span>h1<span class="token operator">/</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>属性值获取</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">//</span>div<span class="token operator">/</span>a<span class="token operator">/</span>@href   获取a里面的href属性值<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取所有</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">//</span><span class="token operator">*</span>  <span class="token comment">#获取所有</span><span class="token operator">//</span><span class="token operator">*</span><span class="token punctuation">[</span>@<span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"xx"</span><span class="token punctuation">]</span>  <span class="token comment">#获取所有class为xx的标签</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>获取节点内容转换成字符串</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">c <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//li/a'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>result<span class="token operator">=</span>etree<span class="token punctuation">.</span>tostring<span class="token punctuation">(</span>c<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'UTF-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xpath </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bs4笔记</title>
      <link href="posts/b83ea4b0.html"/>
      <url>posts/b83ea4b0.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="beautifulsoup"><a href="#beautifulsoup" class="headerlink" title="beautifulsoup"></a>beautifulsoup</h1><h2 id="一、beautifulsoup的简单使用"><a href="#一、beautifulsoup的简单使用" class="headerlink" title="一、beautifulsoup的简单使用"></a>一、beautifulsoup的简单使用</h2><p>简单来说，Beautiful Soup是python的一个库，最主要的功能是从网页抓取数据。官方解释如下：</p><p>Beautiful Soup提供一些简单的、python式的函数用来处理导航、搜索、修改分析树等功能。<br>它是一个工具箱，通过解析文档为用户提供需要抓取的数据，因为简单，所以不需要多少代码就可以写出一个完整的应用程序。</p><h3 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h3><pre class="line-numbers language-none"><code class="language-none">pip install beautifulsoup4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-1解析器"><a href="#1-1解析器" class="headerlink" title="1.1解析器"></a><strong>1.1解析器</strong></h4><p>Beautiful Soup支持Python标准库中的HTML解析器,还支持一些第三方的解析器，如果我们不安装它，则 Python 会使用 Python默认的解析器，lxml 解析器更加强大，速度更快，推荐安装。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">pip install lxml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-2-解析器对比"><a href="#1-2-解析器对比" class="headerlink" title="1.2 解析器对比　"></a>1.2 解析器对比　</h4><p><a href="http://beautifulsoup.readthedocs.io/zh_CN/latest/">官网文档</a></p><h3 id="2、快速开始"><a href="#2、快速开始" class="headerlink" title="2、快速开始"></a>2、快速开始</h3><p>下面的一段HTML代码将作为例子被多次用到.这是 <em>爱丽丝梦游仙境的</em> 的一段内容(以后内容中简称为 <em>爱丽丝</em> 的文档):</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">html_doc <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;p class="title"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;&lt;p class="story"&gt;Once upon a time there were three little sisters; and their names were&lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;Elsie&lt;/a&gt;,&lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;Lacie&lt;/a&gt; and&lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;Tillie&lt;/a&gt;;and they lived at the bottom of a well.&lt;/p&gt;&lt;p class="story"&gt;...&lt;/p&gt;"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用BeautifulSoup解析这段代码,能够得到一个 <code>BeautifulSoup</code> 的对象,并能按照标准的缩进格式的结构输出:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoupsoup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html_doc<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token comment"># html进行美化</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>prettify<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>匹配代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&lt;</span>html<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>head<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>title<span class="token operator">&gt;</span>   The Dormouse's story  <span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"title"</span><span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>b<span class="token operator">&gt;</span>    The Dormouse's story   <span class="token operator">&lt;</span><span class="token operator">/</span>b<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"story"</span><span class="token operator">&gt;</span>   Once upon a time there were three little sisters<span class="token punctuation">;</span> <span class="token keyword">and</span> their names were   <span class="token operator">&lt;</span>a <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"sister"</span> href<span class="token operator">=</span><span class="token string">"http://example.com/elsie"</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token string">"link1"</span><span class="token operator">&gt;</span>    Elsie   <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>   <span class="token punctuation">,</span>   <span class="token operator">&lt;</span>a <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"sister"</span> href<span class="token operator">=</span><span class="token string">"http://example.com/lacie"</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token string">"link2"</span><span class="token operator">&gt;</span>    Lacie   <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>   <span class="token keyword">and</span>   <span class="token operator">&lt;</span>a <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"sister"</span> href<span class="token operator">=</span><span class="token string">"http://example.com/tillie"</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token string">"link3"</span><span class="token operator">&gt;</span>    Tillie   <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>   <span class="token punctuation">;</span><span class="token keyword">and</span> they lived at the bottom of a well<span class="token punctuation">.</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"story"</span><span class="token operator">&gt;</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>几个简单的浏览结构化数据的方法:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">soup<span class="token punctuation">.</span>title  <span class="token comment"># 获取标签title</span><span class="token comment"># &lt;title&gt;The Dormouse's story&lt;/title&gt;</span>soup<span class="token punctuation">.</span>title<span class="token punctuation">.</span>name   <span class="token comment"># 获取标签名称</span><span class="token comment"># 'title'</span>soup<span class="token punctuation">.</span>title<span class="token punctuation">.</span>string   <span class="token comment"># 获取标签title内的内容</span><span class="token comment"># 'The Dormouse's story'</span>soup<span class="token punctuation">.</span>title<span class="token punctuation">.</span>parent  <span class="token comment"># 获取父级标签</span>soup<span class="token punctuation">.</span>title<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>name  <span class="token comment"># 获取父级标签名称</span><span class="token comment"># 'head'</span>soup<span class="token punctuation">.</span>p<span class="token comment"># &lt;p class="title"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;</span>soup<span class="token punctuation">.</span>p<span class="token punctuation">[</span><span class="token string">'class'</span><span class="token punctuation">]</span>  <span class="token comment"># 获取p的class属性值</span><span class="token comment"># 'title'</span>soup<span class="token punctuation">.</span>a<span class="token comment"># &lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;Elsie&lt;/a&gt;</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token comment"># [&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;Elsie&lt;/a&gt;,</span><span class="token comment">#  &lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;,</span><span class="token comment">#  &lt;a class="sister" href="http://example.com/tillie" id="link3"&gt;Tillie&lt;/a&gt;]</span>soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token string">"link3"</span><span class="token punctuation">)</span>  <span class="token comment"># 获取id为link3的标签</span><span class="token comment"># &lt;a class="sister" href="http://example.com/tillie" id="link3"&gt;Tillie&lt;/a&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从文档中找到所有&lt;a&gt;标签的链接:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> link <span class="token keyword">in</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>link<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># http://example.com/elsie</span>    <span class="token comment"># http://example.com/lacie</span>    <span class="token comment"># http://example.com/tillie</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从文档中获取所有文字内容:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3、如何使用"><a href="#3、如何使用" class="headerlink" title="3、如何使用"></a>3、如何使用</h3><p>将一段文档传入BeautifulSoup 的构造方法,就能得到一个文档的对象, 可以传入一段字符串或一个文件句柄.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoupsoup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"index.html"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span><span class="token string">"&lt;html&gt;data&lt;/html&gt;"</span><span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后,Beautiful Soup选择最合适的解析器来解析这段文档,如果手动指定解析器那么Beautiful Soup会选择指定的解析器来解析文档。</p><h2 id="二、beautifulsoup的遍历文档树"><a href="#二、beautifulsoup的遍历文档树" class="headerlink" title="二、beautifulsoup的遍历文档树"></a>二、beautifulsoup的遍历文档树</h2><p>还拿”爱丽丝梦游仙境”的文档来做例子:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">html_doc <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;    &lt;body&gt;&lt;p class="title"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;&lt;p class="story"&gt;Once upon a time there were three little sisters; and their names were&lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;Elsie&lt;/a&gt;,&lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;Lacie&lt;/a&gt; and&lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;Tillie&lt;/a&gt;;and they lived at the bottom of a well.&lt;/p&gt;&lt;p class="story"&gt;...&lt;/p&gt;"""</span><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token comment"># lxml和html.parser解析的有时候会根据html是否完整而有解析不同的问题，需要注意</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html_doc<span class="token punctuation">,</span> <span class="token string">'html.parser'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过这段例子来演示怎样从文档的一段内容找到另一段内容</p><h3 id="1、子节点"><a href="#1、子节点" class="headerlink" title="1、子节点"></a>1、子节点</h3><p>一个Tag可能包含多个字符串或其它的Tag,这些都是这个Tag的子节点.Beautiful Soup提供了许多操作和遍历子节点的属性.</p><p>注意: Beautiful Soup中字符串节点不支持这些属性,因为字符串没有子节点。</p><h4 id="1-1-contents"><a href="#1-1-contents" class="headerlink" title="1.1 .contents"></a>1.1 .contents</h4><p>tag的 <code>.contents</code> 属性可以将tag的子节点以列表的方式输出:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">head_tag <span class="token operator">=</span> soup<span class="token punctuation">.</span>headhead_tag<span class="token comment"># &lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;</span>head_tag<span class="token punctuation">.</span>contents<span class="token punctuation">[</span><span class="token operator">&lt;</span>title<span class="token operator">&gt;</span>The Dormouse's story<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">&gt;</span><span class="token punctuation">]</span>title_tag <span class="token operator">=</span> head_tag<span class="token punctuation">.</span>contents<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>title_tag<span class="token comment"># &lt;title&gt;The Dormouse's story&lt;/title&gt;</span>title_tag<span class="token punctuation">.</span>contents<span class="token comment"># [u'The Dormouse's story']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字符串没有 <code>.contents</code> 属性,因为字符串没有子节点:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">text <span class="token operator">=</span> title_tag<span class="token punctuation">.</span>contents<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>text<span class="token punctuation">.</span>contents<span class="token comment"># AttributeError: 'NavigableString' object has no attribute 'contents'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2、-节点内容"><a href="#2、-节点内容" class="headerlink" title="2、 节点内容"></a>2、 节点内容</h3><h4 id="2-1-string"><a href="#2-1-string" class="headerlink" title="2.1 .string"></a>2.1 .string</h4><p>如果tag只有一个 <code>NavigableString</code> 类型子节点,那么这个tag可以使用 <code>.string</code> 得到子节点。如果一个tag仅有一个子节点,那么这个tag也可以使用 <code>.string</code> 方法,输出结果与当前唯一子节点的 <code>.string</code> 结果相同。</p><p>通俗点说就是：如果一个标签里面没有标签了，那么 .string 就会返回标签里面的内容。如果标签里面只有唯一的一个标签了，那么 .string 也会返回最里面的内容。例如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span> <span class="token punctuation">(</span>soup<span class="token punctuation">.</span>head<span class="token punctuation">.</span>string<span class="token punctuation">)</span><span class="token comment">#The Dormouse's story</span><span class="token comment"># &lt;title&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/title&gt;</span><span class="token keyword">print</span> <span class="token punctuation">(</span>soup<span class="token punctuation">.</span>title<span class="token punctuation">.</span>string<span class="token punctuation">)</span><span class="token comment">#The Dormouse's story</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果tag包含了多个子节点,tag就无法确定，string 方法应该调用哪个子节点的内容, .string 的输出结果是 None</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span> <span class="token punctuation">(</span>soup<span class="token punctuation">.</span>html<span class="token punctuation">.</span>string<span class="token punctuation">)</span><span class="token comment">#None</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-2-text"><a href="#2-2-text" class="headerlink" title="2.2 .text"></a>2.2 .text</h4><p>如果tag包含了多个子节点, text则会返回内部所有文本内容</p><pre class="line-numbers language-none"><code class="language-none">print (soup.html.text)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意：</strong></p><p>strings和text都可以返回所有文本内容  </p><p>区别：text返回内容为字符串类型  strings为生成器generator</p><h3 id="3、-多个内容"><a href="#3、-多个内容" class="headerlink" title="3、 多个内容"></a>3、 <strong>多个内容</strong></h3><pre class="line-numbers language-none"><code class="language-none">.strings .stripped_strings 属性<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-1-strings"><a href="#3-1-strings" class="headerlink" title="3.1**.strings**"></a>3.1**.strings**</h4><p>获取多个内容，不过需要遍历获取，比如下面的例子：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> string <span class="token keyword">in</span> soup<span class="token punctuation">.</span>strings<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token triple-quoted-string string">'''  '\n'"The Dormouse's story"'\n''\n'"The Dormouse's story"'\n''Once upon a time there were three little sisters; and their names were\n''Elsie'',\n''Lacie'' and\n''Tillie'';\nand they lived at the bottom of a well.''\n''...''\n'      '''</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-stripped-strings"><a href="#3-2-stripped-strings" class="headerlink" title="3.2 .stripped_strings"></a>3.2 <strong>.stripped_strings</strong></h4><p>输出的字符串中可能包含了很多空格或空行,使用 <code>.stripped_strings</code> 可以去除多余空白内容</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> string <span class="token keyword">in</span> soup<span class="token punctuation">.</span>stripped_strings<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''"The Dormouse's story""The Dormouse's story"'Once upon a time there were three little sisters; and their names were''Elsie'',''Lacie''and''Tillie'';\nand they lived at the bottom of a well.''...''''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、-父节点"><a href="#4、-父节点" class="headerlink" title="4、 父节点"></a>4、 父节点</h3><p>继续分析文档树,每个tag或字符串都有父节点:被包含在某个tag中</p><h4 id="4-1-parent"><a href="#4-1-parent" class="headerlink" title="4.1 .parent"></a>4.1 .parent</h4><p>通过 <code>.parent</code> 属性来获取某个元素的父节点.在例子“爱丽丝”的文档中,&lt;head&gt;标签是&lt;title&gt;标签的父节点:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">title_tag <span class="token operator">=</span> soup<span class="token punctuation">.</span>titletitle_tag<span class="token comment"># &lt;title&gt;The Dormouse's story&lt;/title&gt;</span>title_tag<span class="token punctuation">.</span>parent<span class="token comment"># &lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>文档的顶层节点比如&lt;html&gt;的父节点是 <code>BeautifulSoup</code> 对象:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">html_tag <span class="token operator">=</span> soup<span class="token punctuation">.</span>html<span class="token builtin">type</span><span class="token punctuation">(</span>html_tag<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token comment"># &lt;class 'bs4.BeautifulSoup'&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="三、beautifulsoup的搜索文档树"><a href="#三、beautifulsoup的搜索文档树" class="headerlink" title="三、beautifulsoup的搜索文档树"></a>三、beautifulsoup的搜索文档树</h2><h3 id="1、find-all"><a href="#1、find-all" class="headerlink" title="1、find_all"></a>1、find_all</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">find_all<span class="token punctuation">(</span> name <span class="token punctuation">,</span> attrs <span class="token punctuation">,</span> recursive <span class="token punctuation">,</span> string <span class="token punctuation">,</span> <span class="token operator">**</span>kwargs <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>find_all()</code> 方法搜索当前tag的所有tag子节点,并判断是否符合过滤器的条件:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">)</span><span class="token comment"># [&lt;title&gt;The Dormouse's story&lt;/title&gt;]</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">,</span> <span class="token string">"title"</span><span class="token punctuation">)</span><span class="token comment"># [&lt;p class="title"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;]</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token comment"># [&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;Elsie&lt;/a&gt;,</span><span class="token comment">#  &lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;,</span><span class="token comment">#  &lt;a class="sister" href="http://example.com/tillie" id="link3"&gt;Tillie&lt;/a&gt;]</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token string">"link2"</span><span class="token punctuation">)</span><span class="token comment"># [&lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;]</span><span class="token keyword">import</span> re<span class="token comment"># 模糊查询 包含sisters的就可以</span>soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span>string<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">"sisters"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 'Once upon a time there were three little sisters; and their names were\n'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有几个方法很相似,还有几个方法是新的,参数中的 <code>string</code> 和 <code>id</code> 是什么含义? 为什么 <code>find_all("p", "title")</code> 返回的是CSS Class为”title”的&lt;p&gt;标签? 我们来仔细看一下 <code>find_all()</code> 的参数.</p><h4 id="1-1-name-参数"><a href="#1-1-name-参数" class="headerlink" title="1.1 name 参数"></a>1.1 name 参数</h4><p><code>name</code> 参数可以查找所有名字为 <code>name</code> 的tag,字符串对象会被自动忽略掉.</p><p>简单的用法如下:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">)</span><span class="token comment"># [&lt;title&gt;The Dormouse's story&lt;/title&gt;]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>搜索 <code>name</code> 参数的值可以使任一类型的 过滤器 ,字符串,正则表达式,列表,方法或是 <code>True</code> .</p><p><strong>&lt;1&gt; 传字符串</strong></p><p>最简单的过滤器是字符串.在搜索方法中传入一个字符串参数,Beautiful Soup会查找与字符串完整匹配的内容,下面的例子用于查找文档中所有的<b>标签</b></p><b><pre class="line-numbers language-python" data-language="python"><code class="language-python">soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token comment"># [&lt;b&gt;The Dormouse's story&lt;/b&gt;]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>&lt;2&gt; 传正则表达式</strong></p><p>如果传入正则表达式作为参数,Beautiful Soup会通过正则表达式的 <code>match()</code> 来匹配内容.下面例子中找出所有以b开头的标签,这表示&lt;body&gt;和&lt;b&gt;标签都应该被找到</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> re<span class="token keyword">for</span> tag <span class="token keyword">in</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">"^b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>tag<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment"># body</span><span class="token comment"># b</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>&lt;3&gt; 传列表</strong></p><p>如果传入列表参数,Beautiful Soup会将与列表中任一元素匹配的内容返回.下面代码找到文档中所有&lt;a&gt;标签和&lt;b&gt;标签</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># [&lt;b&gt;The Dormouse's story&lt;/b&gt;,</span><span class="token comment">#  &lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;Elsie&lt;/a&gt;,</span><span class="token comment">#  &lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;,</span><span class="token comment">#  &lt;a class="sister" href="http://example.com/tillie" id="link3"&gt;Tillie&lt;/a&gt;]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-keyword-参数"><a href="#1-2-keyword-参数" class="headerlink" title="1.2 keyword 参数"></a>1.2 <strong>keyword 参数</strong></h4><p>如果一个指定名字的参数不是搜索内置的参数名,搜索时会把该参数当作指定名字tag的属性来搜索,如果包含一个名字为 <code>id</code> 的参数,Beautiful Soup会搜索每个tag的”id”属性.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token string">'link2'</span><span class="token punctuation">)</span><span class="token comment"># [&lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;]</span><span class="token keyword">import</span> re<span class="token comment"># 超链接包含elsie标签</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>href<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">"elsie"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># [&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;Elsie&lt;/a&gt;]</span><span class="token comment"># 以The作为开头的字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>text<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">"^The"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># ["The Dormouse's story", "The Dormouse's story"]</span><span class="token comment"># class选择器包含st的节点</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>class_<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">"st"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>搜索指定名字的属性时可以使用的参数值包括 字符串 , 正则表达式 , 列表, True .</p><p>下面的例子在文档树中查找所有包含 <code>id</code> 属性的tag,无论 <code>id</code> 的值是什么:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># [&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;Elsie&lt;/a&gt;,</span><span class="token comment">#  &lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;,</span><span class="token comment">#  &lt;a class="sister" href="http://example.com/tillie" id="link3"&gt;Tillie&lt;/a&gt;]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用多个指定名字的参数可以同时过滤tag的多个属性:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>href<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">"elsie"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token string">'link1'</span><span class="token punctuation">)</span><span class="token comment"># [&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;three&lt;/a&gt;]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在这里我们想用 class 过滤，不过 class 是 python 的关键词，这怎么办？加个下划线就可以</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> class_<span class="token operator">=</span><span class="token string">"sister"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''[&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;Elsie&lt;/a&gt;,&lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;,&lt;a class="sister" href="http://example.com/tillie" id="link3"&gt;Tillie&lt;/a&gt;]'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过 <code>find_all()</code> 方法的 <code>attrs</code> 参数定义一个字典参数来搜索包含特殊属性的tag:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">data_soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"data-foo"</span><span class="token punctuation">:</span> <span class="token string">"value"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment"># [&lt;div data-foo="value"&gt;foo!&lt;/div&gt;]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意：如何查看条件id和class同时存在时的写法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> class_<span class="token operator">=</span><span class="token string">"story"</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token string">"x"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"class"</span><span class="token punctuation">:</span><span class="token string">"story"</span><span class="token punctuation">,</span> <span class="token string">"id"</span><span class="token punctuation">:</span><span class="token string">"x"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="1-3-text-参数"><a href="#1-3-text-参数" class="headerlink" title="1.3  text 参数"></a>1.3  <strong>text 参数</strong></h4><p>通过 <code>text</code> 参数可以搜搜文档中的字符串内容.与 <code>name</code> 参数的可选值一样, <code>text</code> 参数接受 字符串 , 正则表达式 , 列表, True</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> re<span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>text<span class="token operator">=</span><span class="token string">"Elsie"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># ['Elsie']</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>text<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"Tillie"</span><span class="token punctuation">,</span> <span class="token string">"Elsie"</span><span class="token punctuation">,</span> <span class="token string">"Lacie"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># ['Elsie', 'Lacie', 'Tillie']</span><span class="token comment"># 只要包含Dormouse就可以</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>text<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">"Dormouse"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># ["The Dormouse's story", "The Dormouse's story"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-4-limit-参数"><a href="#1-4-limit-参数" class="headerlink" title="1.4 limit 参数"></a>1.4 <strong>limit 参数</strong></h4><p><code>find_all()</code> 方法返回全部的搜索结构,如果文档树很大那么搜索会很慢.如果我们不需要全部结果,可以使用 <code>limit</code> 参数限制返回结果的数量.效果与SQL中的limit关键字类似,当搜索到的结果数量达到 <code>limit</code> 的限制时,就停止搜索返回结果.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span>limit<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''[&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;Elsie&lt;/a&gt;, &lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;]'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、find"><a href="#2、find" class="headerlink" title="2、find()"></a>2、find()</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">find<span class="token punctuation">(</span> name <span class="token punctuation">,</span> attrs <span class="token punctuation">,</span> recursive <span class="token punctuation">,</span> string <span class="token punctuation">,</span> <span class="token operator">**</span>kwargs <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>find_all()</code> 方法将返回文档中符合条件的所有tag,尽管有时候我们只想得到一个结果.比如文档中只有一个&lt;body&gt;标签,那么使用 <code>find_all()</code> 方法来查找&lt;body&gt;标签就不太合适, 使用 <code>find_all</code> 方法并设置 <code>limit=1</code> 参数不如直接使用 <code>find()</code> 方法.下面两行代码是等价的:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">,</span> limit<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># [&lt;title&gt;The Dormouse's story&lt;/title&gt;]</span>soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span><span class="token comment"># &lt;title&gt;The Dormouse's story&lt;/title&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>唯一的区别是 <code>find_all()</code> 方法的返回结果是值包含一个元素的列表,而 <code>find()</code> 方法直接返回结果.</p><p><code>find_all()</code> 方法没有找到目标是返回空列表, <code>find()</code> 方法找不到目标时,返回 <code>None</code> .</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"nosuchtag"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># None</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>soup.head.title</code> 是 tag的名字 方法的简写.这个简写的原理就是多次调用当前tag的 <code>find()</code> 方法:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">soup<span class="token punctuation">.</span>head<span class="token punctuation">.</span>title<span class="token comment"># &lt;title&gt;The Dormouse's story&lt;/title&gt;</span>soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"head"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">)</span><span class="token comment"># &lt;title&gt;The Dormouse's story&lt;/title&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、beautifulsoup的css选择器"><a href="#四、beautifulsoup的css选择器" class="headerlink" title="四、beautifulsoup的css选择器"></a>四、beautifulsoup的css选择器</h2><p>我们在写 CSS 时，标签名不加任何修饰，类名前加点，id名前加 #，在这里我们也可以利用类似的方法来筛选元素，用到的方法是 <strong>soup.select()，</strong>返回类型是 <strong>list</strong></p><h3 id="1、通过标签名查找"><a href="#1、通过标签名查找" class="headerlink" title="1、通过标签名查找"></a>1、通过标签名查找</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#[&lt;title&gt;The Dormouse's story&lt;/title&gt;]</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment">#[&lt;b&gt;The Dormouse's story&lt;/b&gt;]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2、通过类名查找"><a href="#2、通过类名查找" class="headerlink" title="2、通过类名查找"></a>2、通过类名查找</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">".sister"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token triple-quoted-string string">'''[&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;Elsie&lt;/a&gt;, &lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;, &lt;a class="sister" href="http://example.com/tillie" id="link3"&gt;Tillie&lt;/a&gt;]'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、id名查找"><a href="#3、id名查找" class="headerlink" title="3、id名查找"></a>3、id名查找</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">"#link1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># [&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;Elsie&lt;/a&gt;]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4、组合查找"><a href="#4、组合查找" class="headerlink" title="4、组合查找"></a>4、组合查找</h3><p>组合查找即和写 class 文件时，标签名与类名、id名进行的组合原理是一样的，例如查找 p 标签中，id 等于 link1的内容，二者需要用空格分开</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">"p #link2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#[&lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>直接子标签查找</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">"p &gt; #link2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># [&lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查找既有class也有id选择器的标签</p><pre class="line-numbers language-none"><code class="language-none">a_string = soup.select(".story#test")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查找有多个class选择器的标签</p><pre class="line-numbers language-none"><code class="language-none">a_string = soup.select(".story.test")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查找有多个class选择器和一个id选择器的标签</p><pre class="line-numbers language-none"><code class="language-none">a_string = soup.select(".story.test#book")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5、属性查找"><a href="#5、属性查找" class="headerlink" title="5、属性查找"></a>5、属性查找</h3><p>查找时还可以加入属性元素，属性需要用中括号括起来，注意属性和标签属于同一节点，所以中间不能加空格，否则会无法匹配到。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">"a[href='http://example.com/tillie']"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#[&lt;a class="sister" href="http://example.com/tillie" id="link3"&gt;Tillie&lt;/a&gt;]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>select 方法返回的结果都是列表形式，可以遍历形式输出，然后用 get_text() 方法来获取它的内容：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> title <span class="token keyword">in</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span>title<span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''ElsieLacieTillie'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></b>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Beautifulsou4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="posts/2f57a694.html"/>
      <url>posts/2f57a694.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、正则基础"><a href="#一、正则基础" class="headerlink" title="一、正则基础"></a>一、正则基础</h2><h3 id="1、为什么使用正则"><a href="#1、为什么使用正则" class="headerlink" title="1、为什么使用正则"></a>1、为什么使用正则</h3><ul><li><p>需求</p><p>判断一个字符串是否是手机号</p></li><li><p>解决</p><p>编写一个函数，给函数一个字符串，如果是手机号则返回True，否则返回False</p></li><li><p>代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">isPhone</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 长度为11</span>    <span class="token comment"># 全部都是数字字符</span>    <span class="token comment"># 以1开头</span>    <span class="token keyword">pass</span><span class="token keyword">if</span> isPhone<span class="token punctuation">(</span><span class="token string">"13812345678"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"是手机号"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"不是手机号"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>注意</p><p>如果使用正则会让这个问题变得简单</p></li></ul><h3 id="2、正则与re模块简介"><a href="#2、正则与re模块简介" class="headerlink" title="2、正则与re模块简介"></a>2、正则与re模块简介</h3><p><strong>概述：</strong> <strong>正则表达式</strong>，又称规则表达式</p><p>正则表达式(regular expression)描述了一种字符串匹配的模式（pattern）</p><p>正则匹配是一个 模糊的匹配(不是精确匹配)</p><p>**re：**python自1.5版本开始增加了re模块，该模块提供了perl风格的正则表达式模式，re模块是python语言拥有了所有正则表达式的功能</p><ul><li><p>如下四个方法经常使用</p><ul><li><p>match()</p></li><li><p>search()</p></li><li><p>findall()</p></li><li><p>finditer()</p></li></ul></li></ul><h2 id="二、正则表达式"><a href="#二、正则表达式" class="headerlink" title="二、正则表达式"></a>二、正则表达式</h2><h3 id="1、匹配单个字符与数字"><a href="#1、匹配单个字符与数字" class="headerlink" title="1、匹配单个字符与数字"></a>1、匹配单个字符与数字</h3><table><thead><tr><th>匹配</th><th>说明</th></tr></thead><tbody><tr><td>.</td><td>匹配除换行符以外的任意字符，当flags被设置为re.S时，可以匹配包含换行符以内的所有字符</td></tr><tr><td>[]</td><td>里面是字符集合，匹配[]里任意一个字符</td></tr><tr><td>[0123456789]</td><td>匹配任意一个数字字符</td></tr><tr><td>[0-9]</td><td>匹配任意一个数字字符</td></tr><tr><td>[a-z]</td><td>匹配任意一个小写英文字母字符</td></tr><tr><td>[A-Z]</td><td>匹配任意一个大写英文字母字符</td></tr><tr><td>[A-Za-z]</td><td>匹配任意一个英文字母字符</td></tr><tr><td>[A-Za-z0-9]</td><td>匹配任意一个数字或英文字母字符</td></tr><tr><td>[^lucky]</td><td>[]里的^称为脱字符，表示非，匹配不在[]内的任意一个字符</td></tr><tr><td>^[lucky]</td><td>以[]中内的某一个字符作为开头</td></tr><tr><td>\d</td><td>匹配任意一个数字字符，相当于[0-9]</td></tr><tr><td>\D</td><td>匹配任意一个非数字字符，相当于<code>[^0-9]</code></td></tr><tr><td>\w</td><td>匹配字母、下划线、数字中的任意一个字符，相当于[0-9A-Za-z_]</td></tr><tr><td>\W</td><td>匹配非字母、下划线、数字中的任意一个字符，相当于<code>[^0-9A-Za-z_]</code></td></tr><tr><td>\s</td><td>匹配空白符(空格、换页、换行、回车、制表)，相当于[ \f\n\r\t]</td></tr><tr><td>\S</td><td>匹配非空白符(空格、换页、换行、回车、制表)，相当于<code>[^ \f\n\r\t]</code></td></tr></tbody></table><h3 id="2、匹配锚字符"><a href="#2、匹配锚字符" class="headerlink" title="2、匹配锚字符"></a>2、匹配锚字符</h3><p>锚字符:用来判定是否按照规定开始或者结尾</p><table><thead><tr><th>匹配</th><th>说明</th></tr></thead><tbody><tr><td>^</td><td>行首匹配，和[]里的^不是一个意思</td></tr><tr><td>$</td><td>行尾匹配</td></tr></tbody></table><h3 id="3、限定符"><a href="#3、限定符" class="headerlink" title="3、限定符"></a>3、限定符</h3><p>限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。有 * 或 + 或 ? 或 {n} 或 {n,} 或 {n,m} 共6种。</p><table><thead><tr><th>匹配</th><th>说明</th></tr></thead><tbody><tr><td>(xyz)</td><td>匹配括号内的xyz，作为一个整体去匹配  一个单元 子存储</td></tr><tr><td>x?</td><td>匹配0个或者1个x，非贪婪匹配</td></tr><tr><td>x*</td><td>匹配0个或任意多个x</td></tr><tr><td>x+</td><td>匹配至少一个x</td></tr><tr><td>x{n}</td><td>确定匹配n个x，n是非负数</td></tr><tr><td>x{n,}</td><td>至少匹配n个x</td></tr><tr><td>x{n,m}</td><td>匹配至少n个最多m个x</td></tr><tr><td>x</td><td>y</td></tr></tbody></table><h2 id="三、re模块中常用函数"><a href="#三、re模块中常用函数" class="headerlink" title="三、re模块中常用函数"></a>三、re模块中常用函数</h2><p><strong>通用flags（修正符）</strong></p><table><thead><tr><th>值</th><th>说明</th></tr></thead><tbody><tr><td>re.I</td><td>是匹配对大小写不敏感</td></tr><tr><td>re.S</td><td>使.匹配包括换行符在内的所有字符</td></tr></tbody></table><p><strong>通用函数</strong></p><ul><li><p>获取匹配结果</p><ul><li><p>使用group()方法 获取到匹配的值</p></li><li><p>groups()    返回一个包含所有小组字符串的元组(也就是自存储的值)，从 1 到 所含的小组号。</p></li></ul></li></ul><h3 id="1、match-函数"><a href="#1、match-函数" class="headerlink" title="1、match()函数"></a>1、match()函数</h3><ul><li><p>原型</p><pre class="line-numbers language-none"><code class="language-none">def match(pattern, string, flags=0)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>功能</p><p>匹配成功返回 匹配的对象</p><p>匹配失败 返回 None</p></li></ul><ul><li><p>获取匹配结果</p><ul><li><p>使用group()方法 获取到匹配的值</p></li><li><p>groups()    返回一个包含所有小组字符串的元组，从 1 到 所含的小组号。</p></li></ul></li><li><p>注意：从第一位开始匹配  只匹配一次</p></li></ul><ul><li><p>参数</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>pattern</td><td>匹配的正则表达式(一种字符串的模式)</td></tr><tr><td>string</td><td>要匹配的字符串</td></tr><tr><td>flags</td><td>标识位，用于控制正则表达式的匹配方式</td></tr></tbody></table></li><li><p>代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> reres <span class="token operator">=</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">'\d{2}'</span><span class="token punctuation">,</span><span class="token string">'123'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#给当前匹配到的结果起别名</span>s <span class="token operator">=</span> <span class="token string">'3G4HFD567'</span>x <span class="token operator">=</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">"(?P&lt;value&gt;\d+)"</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">'value'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="2、search-函数"><a href="#2、search-函数" class="headerlink" title="2、search()函数"></a>2、search()函数</h3><ul><li><p>原型</p><pre class="line-numbers language-none"><code class="language-none">def search(pattern, string, flags=0)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>功能</p><p>扫描整个字符串string，并返回第一个pattern模式成功的匹配</p><p>匹配失败 返回 None</p></li><li><p>参数</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>pattern</td><td>匹配的正则表达式(一种字符串的模式)</td></tr><tr><td>string</td><td>要匹配的字符串</td></tr><tr><td>flags</td><td>标识位，用于控制正则表达式的匹配方式</td></tr></tbody></table></li><li><p>注意：</p><p>只要字符串包含就可以</p><p>只匹配一次</p></li><li><p>示例</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> reres <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'[a-z]'</span><span class="token punctuation">,</span> <span class="token string">'131A3ab889s'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>注意</p><p>与search的区别</p><p>相同点：</p><p>都只匹配一次</p><p>不同点：</p><ul><li><p>search是在要匹配的字符串中  包含正则表达式的内容就可以</p></li><li><p>match 必须第一位就开始匹配  否则匹配失败</p></li></ul></li></ul><h3 id="3、findall-函数（返回列表）"><a href="#3、findall-函数（返回列表）" class="headerlink" title="3、findall()函数（返回列表）"></a>3、findall()函数（返回列表）</h3><ul><li><p>原型</p><pre class="line-numbers language-none"><code class="language-none">def findall(pattern, string, flags=0)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>功能</p><p>扫描整个字符串string，并返回所有匹配的pattern模式结果的字符串列表</p></li><li><p>参数</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>pattern</td><td>匹配的正则表达式(一种字符串的模式)</td></tr><tr><td>string</td><td>要匹配的字符串</td></tr><tr><td>flags</td><td>标识位，用于控制正则表达式的匹配方式</td></tr></tbody></table></li><li><p>示例</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">myStr <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;a href="http://www.baidu.com"&gt;百度&lt;/a&gt;&lt;A href="http://www.taobao.com"&gt;淘宝&lt;/A&gt;&lt;a href="http://www.id97.com"&gt;电影网站&lt;/a&gt;&lt;i&gt;我是倾斜1&lt;/i&gt;&lt;i&gt;我是倾斜2&lt;/i&gt;&lt;em&gt;我是倾斜2&lt;/em&gt;"""</span><span class="token comment"># html里是不区分大小写</span><span class="token comment"># （1）给正则里面匹配的 加上圆括号 会将括号里面的内容进行 单独的返回</span>res <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"(&lt;a href=\"http://www\.(.*?)\.com\"&gt;(.*?)&lt;/a&gt;)"</span><span class="token punctuation">,</span>myStr<span class="token punctuation">)</span> <span class="token comment">#[('&lt;a href="http://www.baidu.com"&gt;百度&lt;/a&gt;', 'baidu', '百度')]</span><span class="token comment"># 括号的区别</span>res <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"&lt;a href=\"http://www\..*?\.com\"&gt;.*?&lt;/a&gt;"</span><span class="token punctuation">,</span>myStr<span class="token punctuation">)</span> <span class="token comment">#['&lt;a href="http://www.baidu.com"&gt;百度&lt;/a&gt;']</span><span class="token comment">#(2) 不区分大小写的匹配</span>res <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"&lt;a href=\"http://www\..*?\.com\"&gt;.*?&lt;/a&gt;"</span><span class="token punctuation">,</span>myStr<span class="token punctuation">,</span>re<span class="token punctuation">.</span>I<span class="token punctuation">)</span> <span class="token comment">#['&lt;a href="http://www.baidu.com"&gt;百度&lt;/a&gt;', '&lt;A href="http://www.taobao.com"&gt;淘宝&lt;/A&gt;']</span>res <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"&lt;[aA] href=\"http://www\..*?\.com\"&gt;.*?&lt;/[aA]&gt;"</span><span class="token punctuation">,</span>myStr<span class="token punctuation">)</span> <span class="token comment">#['&lt;a href="http://www.baidu.com"&gt;百度&lt;/a&gt;']</span><span class="token comment"># (3) 使.支持换行匹配</span>res <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"&lt;a href="</span>http<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span><span class="token punctuation">.</span>?<span class="token punctuation">.</span>com<span class="token string">"&gt;.?&lt;/a&gt;"</span><span class="token punctuation">,</span>myStr<span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span> <span class="token comment">#</span><span class="token comment"># (4) 支持换行 支持不区分大小写匹配</span>res <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"&lt;a href="</span>http<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span><span class="token punctuation">.</span>?<span class="token punctuation">.</span>com<span class="token string">"&gt;.?&lt;/a&gt;"</span><span class="token punctuation">,</span>myStr<span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token operator">|</span>re<span class="token punctuation">.</span>I<span class="token punctuation">)</span> <span class="token comment">#</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="4、finditer-函数"><a href="#4、finditer-函数" class="headerlink" title="4、finditer()函数"></a>4、finditer()函数</h3><ul><li><p>原型</p><pre class="line-numbers language-none"><code class="language-none">def finditer(pattern, string, flags=0)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>功能</p><p>与findall()类似，返回一个迭代器</p></li><li><p>参数</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>pattern</td><td>匹配的正则表达式(一种字符串的模式)</td></tr><tr><td>string</td><td>要匹配的字符串</td></tr><tr><td>flags</td><td>标识位，用于控制正则表达式的匹配方式</td></tr></tbody></table></li><li><p>代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> reres <span class="token operator">=</span> re<span class="token punctuation">.</span>finditer<span class="token punctuation">(</span><span class="token string">'\w'</span><span class="token punctuation">,</span> <span class="token string">'12hsakda1'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> res<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="5、split-函数"><a href="#5、split-函数" class="headerlink" title="5、split()函数"></a>5、split()函数</h3><ul><li><p>作用：切割字符串</p></li><li><p>原型：</p><pre class="line-numbers language-none"><code class="language-none">def split(patter, string, maxsplit=0, flags=0)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>参数</p><p>pattern   正则表达式</p><p>string      要拆分的字符串</p><p>maxsplit   最大拆分次数  默认拆分全部</p><p>flags          修正符</p></li><li><p>示例</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> remyStr <span class="token operator">=</span> <span class="token string">"asdas\rd&amp;a\ts12d\n*a3sd@a_1sd"</span><span class="token comment">#通过特殊字符 对其进行拆分 成列表</span>res <span class="token operator">=</span> re<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"[^a-z]"</span><span class="token punctuation">,</span>myStr<span class="token punctuation">)</span>res <span class="token operator">=</span> re<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"\W"</span><span class="token punctuation">,</span>myStr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="6、修正符"><a href="#6、修正符" class="headerlink" title="6、修正符"></a>6、修正符</h3><ul><li><p>作用</p><p>对正则进行修正</p></li><li><p>使用</p><p>search/match/findall/finditer 等函数 flags参数的使用</p></li><li><p>修正符</p><p>re.I   不区分大小写匹配</p><p>re.S    使.可以匹配换行符   匹配任意字符</p></li><li><p>使用</p><p>re.I</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'[a-z]'</span><span class="token punctuation">,</span><span class="token string">'AaBb'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'[a-z]'</span><span class="token punctuation">,</span><span class="token string">'AaBb'</span><span class="token punctuation">,</span> flags<span class="token operator">=</span>re<span class="token punctuation">.</span>I<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>re.S</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'&lt;b&gt;.*?&lt;/b&gt;'</span><span class="token punctuation">,</span><span class="token string">'&lt;b&gt;b标签&lt;/b&gt;'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'&lt;b&gt;.*?&lt;/b&gt;'</span><span class="token punctuation">,</span><span class="token string">'&lt;b&gt;b标\n签&lt;/b&gt;'</span><span class="token punctuation">,</span> flags<span class="token operator">=</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h2 id="四、正则高级"><a href="#四、正则高级" class="headerlink" title="四、正则高级"></a>四、正则高级</h2><h3 id="1、分组-amp-起名称"><a href="#1、分组-amp-起名称" class="headerlink" title="1、分组&amp;起名称"></a>1、分组&amp;起名称</h3><ul><li><p>概念</p><p>处理简单的判断是否匹配之外，正则表达式还有提取子串的功能，用()表示的就是要提取的分组</p></li><li><p>代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#给当前匹配到的结果起别名</span>s <span class="token operator">=</span> <span class="token string">'3G4HFD567'</span>re<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">"(?P&lt;value&gt;\d+)"</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">'value'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>说明</p><ul><li><p>正则表达式中定义了组，就可以在Match对象上用group()方法提取出子串来</p></li><li><p>group(0)永远是原始字符串，group(1)、group(2)……表示第1、2、……个子串</p></li></ul></li></ul><h3 id="2、编译"><a href="#2、编译" class="headerlink" title="2、编译"></a>2、编译</h3><ul><li><p>概念</p><p>当在python中使用正则表达式时，re模块会做两件事，一件是编译正则表达式，如果表达式的字符串本身不合法，会报错。另一件是用编译好的正则表达式提取匹配字符串</p></li><li><p>编译优点</p><p>如果一个正则表达式要使用几千遍，每一次都会编译，出于效率的考虑进行正则表达式的编译，就不需要每次都编译了，节省了编译的时间，从而提升效率</p></li><li><p>compile()函数</p><ul><li><p>原型</p><pre class="line-numbers language-none"><code class="language-none">def compile(pattern, flags=0)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>作用</p><p>将pattern模式编译成正则对象</p></li><li><p>参数</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>pattern</td><td>匹配的正则表达式(一种字符串的模式)</td></tr><tr><td>flags</td><td>标识位，用于控制正则表达式的匹配方式</td></tr></tbody></table></li><li><p>flags</p><table><thead><tr><th>值</th><th>说明</th></tr></thead><tbody><tr><td>re.I</td><td>是匹配对大小写不敏感</td></tr><tr><td>re.S</td><td>使.匹配包括换行符在内的所有字符</td></tr></tbody></table></li><li><p>返回值</p><p>编译好的正则对象</p></li><li><p>示例</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> rere_phone <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r"(0\d{2,3}-\d{7,8})"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>re_phone<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>re_phone<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>编译后其他方法的使用</p><p>原型</p><pre class="line-numbers language-none"><code class="language-none">def match(self, string, pos=0, endpos=-1)def search(self, string, pos=0, endpos=-1)def findall(self, string, pos=0, endpos=-1)def finditer(self, string, pos=0, endpos=-1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>参数</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>string</td><td>待匹配的字符串</td></tr><tr><td>pos</td><td>从string字符串pos下标开始</td></tr><tr><td>endpos</td><td>结束下标</td></tr></tbody></table><p>示例</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">s1 <span class="token operator">=</span> <span class="token string">"lucky's phone is 010-88888888"</span>s2 <span class="token operator">=</span> <span class="token string">"kaige's phone is 010-99999999"</span>ret1 <span class="token operator">=</span> re_phone<span class="token punctuation">.</span>search<span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret1<span class="token punctuation">,</span> ret1<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ret2 <span class="token operator">=</span> re_phone<span class="token punctuation">.</span>search<span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret2<span class="token punctuation">,</span> ret2<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="3、贪婪与非贪婪"><a href="#3、贪婪与非贪婪" class="headerlink" title="3、贪婪与非贪婪"></a>3、贪婪与非贪婪</h3><ul><li><p>贪婪模式</p><p>贪婪概念：匹配尽可能多的字符</p><ul><li><p>.+  匹配换行符以外的字符至少一次</p></li><li><p>.*  匹配换行符以外的字符任意次</p></li></ul><p>实例</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">res <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'&lt;b&gt;.+&lt;/b&gt;'</span><span class="token punctuation">,</span> <span class="token string">'&lt;b&gt;&lt;/b&gt;&lt;b&gt;b标签&lt;/b&gt;'</span><span class="token punctuation">)</span>res <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'&lt;b&gt;.*&lt;/b&gt;'</span><span class="token punctuation">,</span> <span class="token string">'&lt;b&gt;b标签&lt;/b&gt;&lt;b&gt;b标签&lt;/b&gt;&lt;b&gt;b标签&lt;/b&gt;&lt;b&gt;b标签&lt;/b&gt;'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>非贪婪模式</p><p>非贪婪概念：尽可能少的匹配称为非贪婪匹配，*?、+?即可</p></li><li><p>.+?  匹配换行符以外的字符至少一次  拒绝贪婪</p><ul><li>.*?   匹配换行符以外的字符任意次      拒绝贪婪</li></ul><p>实例</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">res <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'&lt;b&gt;.+?&lt;/b&gt;'</span><span class="token punctuation">,</span> <span class="token string">'&lt;b&gt;b标签&lt;/b&gt;&lt;b&gt;b标签&lt;/b&gt;'</span><span class="token punctuation">)</span>res <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'&lt;b&gt;.*?&lt;/b&gt;'</span><span class="token punctuation">,</span> <span class="token string">'&lt;b&gt;b标签&lt;/b&gt;&lt;b&gt;b标签&lt;/b&gt;&lt;b&gt;b标签&lt;/b&gt;&lt;b&gt;b标签&lt;/b&gt;'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git的使用</title>
      <link href="posts/3645f6a9.html"/>
      <url>posts/3645f6a9.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>为了对项目进行更好的维护，为了方便进行版本控制，所以Git的学习和使用就变得极为重要，此篇博客记录Git的使用方法和命令，以便之后忘记的时候进行查阅。</p><hr><h3 id="一、Git的基本使用及指令："><a href="#一、Git的基本使用及指令：" class="headerlink" title="一、Git的基本使用及指令："></a>一、Git的基本使用及指令：</h3><blockquote><p>初始化Git仓库</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>查看状态</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>向Git仓库中添加文件（<code>.</code>是所有文件，添加后的文件在Git Bash中查看是绿色的）</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>提交修改</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> commit -m <span class="token string">'这里面是修改内容的描述，一定一定一定要好好写，写人话，让自己能看懂'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>回滚至之前版本</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log<span class="token function">git</span> reset --hard 版本号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>回滚至之后版本</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reflog<span class="token function">git</span> reset --hard 版本号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset --mix 版本号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="二、git的工作原理"><a href="#二、git的工作原理" class="headerlink" title="二、git的工作原理"></a>二、git的工作原理</h3><blockquote><p>Git把管理的文件分为了两个区域四个状态。</p></blockquote><p><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/20220831011920.png"></p><p><strong>工作区</strong>：当前开发程序所在目录称为工作区，即：工作开发都是在该目录，该区域的文件会有状态的变化且状态由git自动检测，如果程序中文件做任何操作（增、删、改），文件状态均会被检测到，可以使用 <code>git status</code>命令查看。</p><p><strong>版本库</strong>：工作区检测到有文件发生变化，那么意味着较上一个版本之后对程序进行了修改，修改完成之后，可以当做下一版本进行提交，那么就是执行 <code>git add .</code> 将所有文件提交到暂存区，然后再执行<code>git commit -m '又一个版本'</code>提交到版本库的分支即可，之后可以使用<code>git log</code>命令查看版本记录。</p><p><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/20220831012214.png"></p><hr><h3 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h3><p><a href="https://www.cnblogs.com/wupeiqi/p/7295372.html">https://www.cnblogs.com/wupeiqi/p/7295372.html</a><br><a href="https://zhuanlan.zhihu.com/p/465954849">https://zhuanlan.zhihu.com/p/465954849</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django记录</title>
      <link href="posts/a1ca777d.html"/>
      <url>posts/a1ca777d.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>git push的方法：</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token function">git</span> status //查看git仓库的状态<span class="token function">git</span> commit -m <span class="token string">"此次修改操作的名字"</span><span class="token function">git</span> push<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><blockquote><p>在acapp中添加 <code>.gitignore</code>文件<br>编辑此文件，可以设置在git push时忽略上传<code>__pycache__</code></p></blockquote><p><code>.gitignore</code>文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">*/__pycache__<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的this关键字</title>
      <link href="posts/f7f02c1d.html"/>
      <url>posts/f7f02c1d.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><p>this 是自身的一个对象，代表对象本身，可以理解为：指向对象本身的一个指针。</p><p>this 的用法在 Java 中大体可以分为3种：</p><p>1.普通的直接引用</p><p>这种就不用说了，this 相当于是指向当前对象本身。</p><p>2.形参（局部变量）与成员变量名字重名，用 this 来区分：<br>（this表示所在方法的调用者的地址值（2022.5.28新理解））</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GirlFriend</span> <span class="token punctuation">{</span>    <span class="token comment">//属性</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span> <span class="token comment">//0</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//10</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//0</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>作用：可以区别成员变量和局部变量。</p><p>3.引用构造函数</p><p>这个和 super 一起总结，待更新中。。。。</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“浅谈” IPV4 与 IPV6</title>
      <link href="posts/6497bdb4.html"/>
      <url>posts/6497bdb4.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="IPV4-冷知识："><a href="#IPV4-冷知识：" class="headerlink" title="IPV4 冷知识："></a>IPV4 冷知识：</h3><p>我们每个人都需要一个身份号码以识别身份，为了识别网络上的使用者，每台机器其实也有个“身份”——IP，它是唯一的。IP是Internet Protocol（网际互连协议）的缩写，是TCP/IP体系中的网络层协议。</p><p>Internet上的所有计算机，都使用TCP/IP协议作为网络通信的标准。我们熟悉的 IPv4，诞生在1970年代，意思是网际协议第4版(Internet Protocol version 4)，是TCP/IP协议使用的数据报传输机制。</p><p>即使IPv4设计得很好，但其缺点也逐渐显露出来，其中最致命的是：数量有限。IPv4地址由点号分隔的四组数字表示。每个数字都是八位二进制数，例如：14.215.177.39。IPv4总共有32位，总共能表示的IP地址大约为43亿。</p><hr><h3 id="为什么要用-IPv6？"><a href="#为什么要用-IPv6？" class="headerlink" title="为什么要用 IPv6？"></a>为什么要用 IPv6？</h3><h4 id="更大的地址空间："><a href="#更大的地址空间：" class="headerlink" title="更大的地址空间："></a>更大的地址空间：</h4><p>IPv6 采用 128 位地址长度，为我们提供了 2^128 个地址，可以说是不受任何限制的提供地址，保守估算 IPv6 实际可分配的地址，整个地球的每平方米面积上仍可分配 1000 多个地址，为全世界的每一粒沙子编上一个 IP 地址真的不是随便说的。</p><h4 id="更快的传输速度："><a href="#更快的传输速度：" class="headerlink" title="更快的传输速度："></a>更快的传输速度：</h4><p>IPv6 使用的是固定报头，不像 IPv4 那样携带一堆冗长的数据，简短的报头提升了网络数据转发的效率。并且由于 IPv6 的路由表更小，聚合能力更强，保证了数据转发的路径更短，极大的提高了转发效率，IPv6 也消除了 IPv4 中常见的大部分地址冲突问题，并为设备提供了更多简化的连接和通信。</p><h4 id="更安全的传输方式："><a href="#更安全的传输方式：" class="headerlink" title="更安全的传输方式："></a>更安全的传输方式：</h4><p>IPv4 从未被认为是安全的，虽然越来越多的网站正在开启 SSL，但是依旧有大量的网站没有采用 HTTPS，但是 IPv6 从头到尾都是建立在安全的基础上的，在网络层认证与加密数据并对 IP 报文进行校验，为用户提供客户端到服务端的数据安全，保证数据不被劫持。</p><p>除了上面这些，相对比 IPv4， IPv6 协议对移动端更加友好，它可以增强移动终端的移动特性、安全特性、路由特性，同时降低网络部署的难度和投资。IPv6 增加了自动配置以及重配置技术，即插即用，对于 IP 地址等信息实现自动增删更新配置，提升 IPv6 的易管理性。</p><h4 id="国家也在重视-IPV6-的发展"><a href="#国家也在重视-IPV6-的发展" class="headerlink" title="国家也在重视 IPV6 的发展"></a>国家也在重视 IPV6 的发展</h4><p><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/20220306092504.png"></p><hr><h3 id="IPv4-用完了！"><a href="#IPv4-用完了！" class="headerlink" title="IPv4 用完了！"></a>IPv4 用完了！</h3><p>2019年11月26日下午，负责英国、欧洲、中东和部分中亚地区互联网资源分配的欧洲网络协调中心（RIPE NCC）宣布，全球所有43亿个 IPv4 地址已全部分配完毕，全球IPv4地址耗尽。这意味着没有更多的IPv4地址可以分配给ISP（网络服务提供商）和其他大型网络基础设施提供商。事实上，IPv4 顶级地址（top-level ）在2012年就已耗尽。当时，所有 IPv4 地址空间已分配给全球五大区域互联网注册机构。很快，这五大区域互联网注册机构就用尽了其所拥有的 IPv4 地址。虽然 IPv4 地址耗尽，但世界各国早已开始布局 IPv6。</p><hr><h3 id="运营商想了什么新办法维持-IPv4-运行？"><a href="#运营商想了什么新办法维持-IPv4-运行？" class="headerlink" title="运营商想了什么新办法维持 IPv4 运行？"></a>运营商想了什么新办法维持 IPv4 运行？</h3><p>最常见的是某种 NAT。NAT 是一种共用地址的方式，你可以把它想象成老式电话的公用线路。如果共用的 IP 地址不算太抢手，你也能轻松连上网络。浏览大多数网站是没有问题，但某些地图网站、iTunes 商店等使用大量连接以提升加载速度的网站可能显示不出图片，具体要看多少人在和你共用 IP 地址。邮件是没有问题的，不管是纸邮还是电邮。但是，如果某个网站要封禁违规者，他们往往会封禁其 IP 地址。要是你和 1000 个网民共用一个 IP 地址，但凡有一个人被封禁，你也难逃厄运。运营商不太可能去帮你解决这种问题。</p><p>另外，服务器也没法架设在家里了，除非你买一个静态 IP 地址。就算运营商能卖给你，未来几年价格也会持续攀升。一些运营商可能只会给你一个静态 IP 的端口号让你做端口转发，而非独占一个 IP 地址。</p><p>P2P 程序，例如语音或视频聊天、电子游戏，甚至那些合法的 BitTorrent 客户端都可能出问题。有些运营商和程序或许能处理得比较好，但大范围的故障在所难免。</p><p>现在有些网站还能根据 IPv4 地址自动显示你当地的天气、新闻、影讯，而 NAT 可能也会破坏这一定位机制，你得自己告诉网站你到底在哪儿。</p><hr><h3 id="IPV4什么时候结束？"><a href="#IPV4什么时候结束？" class="headerlink" title="IPV4什么时候结束？"></a>IPV4什么时候结束？</h3><p>大多数运营商不会变更已有的 IPv4 用户所享受的服务，只有当他们选择变更服务时才会被迫与其他人共用一个公网地址。但无论如何，在大多数地方，未来几年内你都有 IPv4 可以用。<br>因此 IPV4/IPV6 双栈将会是一个漫长无限期的过程然后再经过一个漫长几乎无限期的过程后——“无限趋近”IPv6-only.<br><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/20220306094338.png"><br>所以说并没有什么强制性的最后期限，但别忘了，IPv4 会渐渐变得难以为继。</p><h3 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h3><p><a href="https://www.miit.gov.cn/jgsj/txs/wjfb/art/2020/art_ed97eb9802da4f168acb823227663f1b.html">https://www.miit.gov.cn/jgsj/txs/wjfb/art/2020/art_ed97eb9802da4f168acb823227663f1b.html</a><br><a href="https://www.zhihu.com/question/24719173">https://www.zhihu.com/question/24719173</a><br><a href="https://baijiahao.baidu.com/s?id=1651519779769763087&amp;wfr=spider&amp;for=pc">https://baijiahao.baidu.com/s?id=1651519779769763087&amp;wfr=spider&amp;for=pc</a><br><a href="http://www.yjcf360.com/jinritoutiao/643466.htm">http://www.yjcf360.com/jinritoutiao/643466.htm</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ping不通GitHub的解决方法</title>
      <link href="posts/b6372170.html"/>
      <url>posts/b6372170.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>今天遇到了一个很头疼的问题：<br><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/20220303195428.png"></p><p>由于Github的CDN （Content Delivery Network，即内容分发网络，基本原理：利用全局负载技术将用户的访问指向当时较近的最佳的CDN节点）<del>被伟大的墙屏蔽，导致我们在国内访问Github会非常地慢，尤其是在clone仓库时，只有几十K的速度，下载半天，还会经常失败，让人头疼。</del></p><p>而Github是程序员的标配，俗话说：“工欲善其事，必先利其器”，所以，本文介绍的是：通过修改hosts文件的方法来绕过国内DNS解析。由于Github只是被DNS污染，而不是像Google那样被IP封锁，所以，我们不需要科学上网，也不需要海外的服务器辅助，这样操作一波后，就可以直接访问Github的CDN节点（主DNS根据一系列策略确定当时最适当的CDN节点，并将解析的结果（IP地址）发给用户，用户向给定的CDN节点请求相应网站的内容 ），从而达到加速的目的。</p><hr><h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><p>1.首先打开 <a href="https://websites.ipaddress.com/">ipaddress.com</a> 网站，查询以下网址对应地IP：</p><pre class="line-numbers language-none"><code class="language-none">github.comgithub.global.ssl.fastly.net<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/20220303195839.png"></p><p><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/20220303200125.png"></p><p>记下IP地址</p><p>2.打开hosts文件</p><p>hosts文件是啥？将一些常用的网址域名与其对应的IP地址建立一个关联“数据库”，当用户在浏览器中输入一个需要登录的网址时，系统会首先自动从Hosts文件中寻找对应的IP地址，一旦找到，系统会立即打开对应网页，如果没有找到，则系统再会将网址提交DNS域名解析服务器进行IP地址的解析，如果发现是被屏蔽的IP或域名，就会禁止打开此网页！</p><p>目录：<br><code>C:\Windows\System32\drivers\etc\hosts</code></p><p><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/20220303200338.png"></p><p>3.复制查询后地ip，然后在hosts文件中做出相应地修改<br><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/20220303200427.png"></p><p>4.修改后保存退出，在cmd命令行执行刷新命令:</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">ipconfig/flushdns<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/20220303200635.png"></p><p>会发现已经可以ping通Github了<br><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/20220303200848.png"></p><hr><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章:"></a>参考文章:</h3><p><a href="https://blog.csdn.net/qq_42102911/article/details/121485672?spm=1001.2014.3001.5501">https://blog.csdn.net/qq_42102911/article/details/121485672?spm=1001.2014.3001.5501</a><br><a href="https://blog.csdn.net/weixin_42232769/article/details/105655388">https://blog.csdn.net/weixin_42232769/article/details/105655388</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo关闭渲染</title>
      <link href="posts/73565b1b.html"/>
      <url>posts/73565b1b.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><blockquote><p>Hexo在部署的时候会将<code>source</code>文件夹下的所有<code>md</code>文件或者<code>html</code>文件都会被渲染，有时候我们不想这些文件被渲染怎么办？比如很多时候我们想要写一个 <code>README.md</code>、<code>xxxx.html</code> 或者一些自定义的页面。比如百度或者谷歌在验证站长权限的时候，通常都会要求在主目录下添加一个 html 文件。</p></blockquote><hr><h3 id="不渲染-html-文件-不推荐"><a href="#不渲染-html-文件-不推荐" class="headerlink" title="不渲染 html 文件(不推荐):"></a>不渲染 html 文件(不推荐):</h3><p>在不想被渲染的 html 文件最上面添加如下代码:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">---layout: false---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h3 id="自定义不渲染的文件："><a href="#自定义不渲染的文件：" class="headerlink" title="自定义不渲染的文件："></a>自定义不渲染的文件：</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">skip_render: test/* 单个文件夹下全部文件skip_render: test/*.md 单个文件夹下指定类型文件skip_render: test/** 单个文件夹下全部文件以及子目录多个文件夹以及各种复杂情况：skip_render: README.md  - <span class="token variable"><span class="token variable">`</span>test1/*.html<span class="token variable">`</span></span>  - <span class="token variable"><span class="token variable">`</span>test2/**<span class="token variable">`</span></span>或者：skip_render: <span class="token punctuation">[</span>games/**, depview/**, knowledge/**<span class="token punctuation">]</span>这里的路径匹配可以使用正则表达式。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：<code>skip_render</code>参数设置的路径是相对于<code>source</code>目录的路径。例如，需要跳过渲染<code>source/README.md</code>，只需要设置 <code>skip_render:README.md</code>。</p><p>在设置了跳过渲染之后，最好使用<code>hexo clean</code>清除以前的编译结果，保证配置生效。</p><h3 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h3><p><a href="https://blog.csdn.net/ganzhilin520/article/details/79057774">https://blog.csdn.net/ganzhilin520/article/details/79057774</a><br><a href="https://www.cnblogs.com/lfri/p/12219608.html">https://www.cnblogs.com/lfri/p/12219608.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux一键搭建Alist</title>
      <link href="posts/7732d74f.html"/>
      <url>posts/7732d74f.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Linux一键搭建脚本"><a href="#Linux一键搭建脚本" class="headerlink" title="Linux一键搭建脚本"></a>Linux一键搭建脚本</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装</span><span class="token function">curl</span> -fsSL <span class="token string">"https://nn.ci/alist.sh"</span> <span class="token operator">|</span> <span class="token function">bash</span> -s <span class="token function">install</span> /root<span class="token comment"># 更新</span><span class="token function">curl</span> -fsSL <span class="token string">"https://nn.ci/alist.sh"</span> <span class="token operator">|</span> <span class="token function">bash</span> -s update /root<span class="token comment"># 卸载</span><span class="token function">curl</span> -fsSL <span class="token string">"https://nn.ci/alist.sh"</span> <span class="token operator">|</span> <span class="token function">bash</span> -s uninstall /root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="手动搭建参考官方文档："><a href="#手动搭建参考官方文档：" class="headerlink" title="手动搭建参考官方文档："></a>手动搭建参考官方文档：</h3><p><a href="https://alist-doc.nn.ci/docs/install/manual">https://alist-doc.nn.ci/docs/install/manual</a></p><h3 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h3><p><a href="https://alist-doc.nn.ci/docs/install/script">https://alist-doc.nn.ci/docs/install/script</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Alist </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker容器的迁移</title>
      <link href="posts/1b68a79a.html"/>
      <url>posts/1b68a79a.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p><del>今天需要使用docker的迁移功能，于是又是两个小时的爆肝</del></p><hr><h3 id="docker-export-import与docker-save-load的区别："><a href="#docker-export-import与docker-save-load的区别：" class="headerlink" title="docker export/import与docker save/load的区别："></a>docker export/import与docker save/load的区别：</h3><p>export/import会丢弃历史记录和元数据信息，仅保存容器当时的快照状态<br>save/load会保存完整记录，体积更大</p><p><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/20220227153738.png"></p><p>如果直接将export&amp;import作用于container，那么打包的东西不会包含存储层的数据，例如，开了一个mysql容器，那么容器中的相关配置信息会保留，但是mysql数据库中存的数据不会被保留。而如果将一个container进行commit后，再使用save&amp;load，可以保留相应的数据。</p><p>由于需要保留迁移后的数据，因此使用save&amp;load这种方式。</p><hr><h3 id="定制镜像："><a href="#定制镜像：" class="headerlink" title="定制镜像："></a>定制镜像：</h3><p>由于save&amp;load实际操作的是image，所以导出之前，要先使用commit命令把容器中相对于其底层镜像的修改，提交为一层文件系统，与原有的image结合构成一个新的image。新的image中会包含所有修改的内容。<br>（ps：这种制作镜像的方式不被提倡，因为这样做会保留一些元数据信息，导致image过大，如果想用于制作一个简洁的镜像，需使用DockerFile的方式定制镜像，这里不做详述）<br>这样以一个容器salve02为例，将它提交到一个叫做theslave02的镜像上，再打上标签</p><p><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/20220227153900.png"></p><p>提交完成后我们可以看到这么一个image：<br><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/20220227153918.png"></p><hr><h3 id="导出镜像："><a href="#导出镜像：" class="headerlink" title="导出镜像："></a>导出镜像：</h3><p>把镜像导出为一个输出文件：<br><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/20220227154031.png"></p><p>查看导出的文件：<br><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/20220227154050.png"></p><hr><h3 id="传输文件："><a href="#传输文件：" class="headerlink" title="传输文件："></a>传输文件：</h3><p>将导出的输出文件通过scp的方式发送到本地的主机上：<br><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/20220227154119.png"></p><hr><h3 id="导入镜像："><a href="#导入镜像：" class="headerlink" title="导入镜像："></a>导入镜像：</h3><p>在本地主机上，将受到的文件导入为镜像文件:<br><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/20220227154141.png"></p><p>查看镜像文件：<br><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/20220227154153.png"></p><hr><h3 id="使用镜像运行容器："><a href="#使用镜像运行容器：" class="headerlink" title="使用镜像运行容器："></a>使用镜像运行容器：</h3><p>使用刚刚导入的镜像，运行为一个容器：<br><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/20220227154221.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -p <span class="token number">19132</span>:19132/udp --name my_docker_server -itd docker_lesson:1.0  <span class="token comment"># 创建并运行docker_lesson:1.0镜像 使用udp传输</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看容器运行状况：<br><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/20220227154547.png"></p><p>进入容器：<br><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/20220227154559.png"></p><h3 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h3><p><a href="https://blog.csdn.net/weixin_36343850/article/details/80553680x">https://blog.csdn.net/weixin_36343850/article/details/80553680x</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过53端口udp转发校园网</title>
      <link href="posts/db977a1a.html"/>
      <url>posts/db977a1a.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>服务器Linux系统：CentOS  7.6 64位<br>服务器端口设置记录：<br><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/20220218001200.png"></p><h3 id="服务端："><a href="#服务端：" class="headerlink" title="服务端："></a>服务端：</h3><p>安装GCC环境：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> gcc gcc-c++ <span class="token function">make</span> <span class="token function">tar</span> -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载：<br><a href="https://chanpoe-storage.obs.cn-north-4.myhuaweicloud.com/storage/softether-vpnserver-v4.34-9745-rtm-2020.04.05-linux-x64-64bit.tar.gz?AWSAccessKeyId=QBTXBXYVWXDRBXBVHNVW&amp;Expires=1676220979&amp;Signature=7xpNEpv85Z4lxV9nVKtwvdf/zrA=">softether-vpnserver-v4.34-9745-rtm-2020.04.05-linux-x64-64bit.tar.gz</a></p><p>上传到服务器后，解压：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> -zxvf softether-vpnserver-v4.34-9745-rtm-2020.04.05-linux-x64-64bit.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进入目录：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> vpnserver/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编译：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：<br>提示处输入三次1</p><p>启动：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./vpnserver start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./vpncmd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/20220218002559.png"></p><p>输入1</p><p><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/20220218002634.png"></p><h6 id="服务器没搭建网站请忽略"><a href="#服务器没搭建网站请忽略" class="headerlink" title="服务器没搭建网站请忽略"></a><del>服务器没搭建网站请忽略</del></h6><p>这里由于我的服务器搭建了网站，所以默认的443端口（https）被占用，因此输入<code>公网ip:5555</code><br>然后下一项输入回车</p><p>进入到VPN交互。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ServerPasswordSet<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后设置管理密码</p><hr><h3 id="管理端："><a href="#管理端：" class="headerlink" title="管理端："></a>管理端：</h3><p>下载：<br><a href="https://chanpoe-storage.obs.cn-north-4.myhuaweicloud.com/storage/softether-vpnserver_vpnbridge-v4.28-9669-beta-2018.09.11-windows-x86_x64-intel.exe?AWSAccessKeyId=QBTXBXYVWXDRBXBVHNVW&amp;Expires=1676219722&amp;Signature=VmLmNzZDmvGaJjpeoSgaHRQPQsU=">softether-vpnserver_vpnbridge-v4.28-9669-beta-2018.09.11-windows-x86_x64-intel.exe</a></p><p>安装：<br><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/20220218003857.png"></p><p><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/20220218003754.png"></p><p><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/20220218003947.png"></p><p><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/20220218004013.png"></p><p><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/20220218004042.png"></p><p><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/20220218004124.png"></p><p><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/20220218004200.png"></p><p><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/20220218004312.png"></p><p><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/20220218004331.png"></p><p><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/20220218004405.png"></p><p><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/20220218004424.png"></p><p><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/20220218004619.png"></p><h3 id="客户端（OpenVpn）"><a href="#客户端（OpenVpn）" class="headerlink" title="客户端（OpenVpn）"></a>客户端（OpenVpn）</h3><p>使用方法：（官网需要梯子）<br><a href="https://openvpn.net/vpn-client/">https://openvpn.net/vpn-client/</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 校园网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tmux</title>
      <link href="posts/29b26b27.html"/>
      <url>posts/29b26b27.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>为了让服务器实现窗口挂起，我曾经使用过GNU screen，为的就是保证关闭窗口后，会话不终止。这样做的好处有很多，比如说你在服务器上面搭建一个游戏服，一旦打开了游戏服，你的窗口就必须停留在电脑桌面，如果关闭电脑或是关闭窗口，会话也将随之停止，游戏服就会被强制关闭。还有，如果平常使用服务器窗口进行项目代码的编写时候，突然遇到不可逆的外界因素导致自己的电脑断网或者是突然关机，那么电脑与服务器的连接就会断开，刚才编辑的项目可能造成丢失，这就很必要有一个如上所述的功能来维护我们的操作。所以，学会服务器的终端复用，是我们进修Linux不可或缺的一步。</p><h2 id="Tmux简介："><a href="#Tmux简介：" class="headerlink" title="Tmux简介："></a>Tmux简介：</h2><p>1.1 会话与进程</p><p>命令行的典型使用方式是，打开一个终端窗口（terminal window，以下简称”窗口”），在里面输入命令。用户与计算机的这种临时的交互，称为一次”会话”（session） 。</p><p>会话的一个重要特点是，窗口与其中启动的进程是连在一起的。打开窗口，会话开始；关闭窗口，会话结束，会话内部的进程也会随之终止，不管有没有运行完。</p><p>一个典型的例子就是，SSH 登录远程计算机，打开一个远程窗口执行命令。这时，网络突然断线，再次登录的时候，是找不回上一次执行的命令的。因为上一次 SSH 会话已经终止了，里面的进程也随之消失了。</p><p>为了解决这个问题，会话与窗口可以”解绑”：窗口关闭时，会话并不终止，而是继续运行，等到以后需要的时候，再让会话”绑定”其他窗口。</p><p>1.2 Tmux 的作用</p><p>Tmux 就是会话与窗口的”解绑”工具，将它们彻底分离。</p><p>（1）它允许在单个窗口中，同时访问多个会话。这对于同时运行多个命令行程序很有用。 （2） 它可以让新窗口”接入”已经存在的会话。 （3）它允许每个会话有多个连接窗口，因此可以多人实时共享会话。 （4）它还支持窗口任意的垂直和水平拆分。</p><p>类似的终端复用器还有 GNU Screen。Tmux 与它功能相似，但是更易用，也更强大。</p><hr><h2 id="Tmux的安装："><a href="#Tmux的安装：" class="headerlink" title="Tmux的安装："></a>Tmux的安装：</h2><p>2.1 安装</p><p>Tmux 一般需要自己安装。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Ubuntu安装：</span>$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> tmux<span class="token comment"># Centos安装：</span>$ <span class="token function">sudo</span> yum <span class="token function">install</span> tmux<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.2 使用（最强）配置文件<br><a href="https://chanpoe.lanzoul.com/iXlmBzcabmf">点我下载</a></p><p>使用scp将解压后的文件上传到自己的用户目录下。</p><p>2.3 启动与退出</p><p>安装完成后，键入tmux命令，就进入了 Tmux 窗口。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ tmux<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面命令会启动 Tmux 窗口，底部有一个状态栏。状态栏的左侧是窗口信息（编号和名称），右侧是系统信息。</p><h2 id="tmux教程"><a href="#tmux教程" class="headerlink" title="tmux教程"></a>tmux教程</h2><pre class="line-numbers language-none"><code class="language-none">功能：    (1) 分屏。    (2) 允许断开Terminal连接后，继续运行进程。结构：    一个tmux可以包含多个session，一个session可以包含多个window，一个window可以包含多个pane。    实例：        tmux:            session 0:                window 0:                    pane 0                    pane 1                    pane 2                    ...                window 1                window 2                ...            session 1            session 2            ...操作：    (1) tmux：新建一个session，其中包含一个window，window中包含一个pane，pane里打开了一个shell对话框。    (2) 按下Ctrl + a后手指松开，然后按%：将当前pane左右平分成两个pane。    (3) 按下Ctrl + a后手指松开，然后按"：将当前pane上下平分成两个pane。    (4) Ctrl + d：关闭当前pane；如果当前window的所有pane均已关闭，则自动关闭window；如果当前session的所有window均已关闭，则自动关闭session。    (5) 鼠标点击可以选pane。    (6) 按下ctrl + a后手指松开，然后按方向键：选择相邻的pane。    (7) 鼠标拖动pane之间的分割线，可以调整分割线的位置。    (8) 按住ctrl + a的同时按方向键，可以调整pane之间分割线的位置。    (9) 按下ctrl + a后手指松开，然后按z：将当前pane全屏/取消全屏。    (10) 按下ctrl + a后手指松开，然后按d：挂起当前session。    (11) tmux a：打开之前挂起的session。    (12) 按下ctrl + a后手指松开，然后按s：选择其它session。        方向键 —— 上：选择上一项 session/window/pane        方向键 —— 下：选择下一项 session/window/pane        方向键 —— 右：展开当前项 session/window        方向键 —— 左：闭合当前项 session/window    (13) 按下Ctrl + a后手指松开，然后按c：在当前session中创建一个新的window。    (14) 按下Ctrl + a后手指松开，然后按w：选择其他window，操作方法与(12)完全相同。    (15) 按下Ctrl + a后手指松开，然后按PageUp：翻阅当前pane内的内容。    (16) 鼠标滚轮：翻阅当前pane内的内容。    (17) 在tmux中选中文本时，需要按住shift键。（仅支持Windows和Linux，不支持Mac，不过该操作并不是必须的，因此影响不大）    (18) tmux中复制/粘贴文本的通用方式：        (1) 按下Ctrl + a后松开手指，然后按[        (2) 用鼠标选中文本，被选中的文本会被自动复制到tmux的剪贴板        (3) 按下Ctrl + a后松开手指，然后按]，会将剪贴板中的内容粘贴到光标处<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h3><p><a href="https://zhuanlan.zhihu.com/p/335818087">https://zhuanlan.zhihu.com/p/335818087</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tmux </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7 firewalld</title>
      <link href="posts/25dffcf6.html"/>
      <url>posts/25dffcf6.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="一、firewalld的基本使用"><a href="#一、firewalld的基本使用" class="headerlink" title="一、firewalld的基本使用"></a>一、firewalld的基本使用</h3><p>启动： <code>systemctl start firewalld</code><br>查看状态： <code>systemctl status firewalld</code><br>停止： <code>systemctl disable firewalld</code><br>禁用： <code>systemctl stop firewalld</code></p><hr><h3 id="二、systemctl是CentOS7的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体"><a href="#二、systemctl是CentOS7的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体" class="headerlink" title="二、systemctl是CentOS7的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体"></a>二、systemctl是CentOS7的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体</h3><p>启动一个服务：<code>systemctl start firewalld.service</code><br>关闭一个服务：<code>systemctl stop firewalld.service</code><br>重启一个服务：<code>systemctl restart firewalld.service</code><br>显示一个服务的状态：<code>systemctl status firewalld.service</code><br>在开机时启用一个服务：<code>systemctl enable firewalld.service</code><br>在开机时禁用一个服务：<code>systemctl disable firewalld.service</code><br>查看服务是否开机启动：<code>systemctl is-enabled firewalld.service</code><br>查看已启动的服务列表：<code>systemctl list-unit-files|grep enabled</code><br>查看启动失败的服务列表：<code>systemctl --failed</code></p><hr><h3 id="三、配置firewalld-cmd"><a href="#三、配置firewalld-cmd" class="headerlink" title="三、配置firewalld-cmd"></a>三、配置firewalld-cmd</h3><p>查看版本： <code>firewall-cmd --version</code><br>查看帮助： <code>firewall-cmd --help</code><br>显示状态： <code>firewall-cmd --state</code><br>查看所有打开的端口： <code>firewall-cmd --zone=public --list-ports</code><br>更新防火墙规则： <code>firewall-cmd --reload</code><br>查看区域信息:  <code>firewall-cmd --get-active-zones</code><br>查看指定接口所属区域： <code>firewall-cmd --get-zone-of-interface=eth0</code><br>拒绝所有包：<code>firewall-cmd --panic-on</code><br>取消拒绝状态： <code>firewall-cmd --panic-off</code><br>查看是否拒绝： <code>firewall-cmd --query-panic</code></p><hr><h3 id="四、如何开启一个端口"><a href="#四、如何开启一个端口" class="headerlink" title="四、如何开启一个端口"></a>四、如何开启一个端口</h3><p>添加<br><code>firewall-cmd --zone=public --add-port=80/tcp --permanent</code>    （–permanent永久生效，没有此参数重启后失效）<br>重新载入<br><code>firewall-cmd --reload</code><br>查看<br><code>firewall-cmd --zone= public --query-port=80/tcp</code><br>删除<br><code>firewall-cmd --zone= public --remove-port=80/tcp --permanent</code></p><hr><h3 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h3><p><a href="https://www.cnblogs.com/hubing/p/6058932.ht">https://www.cnblogs.com/hubing/p/6058932.ht</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Firewalld </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win11安装Android子系统</title>
      <link href="posts/2f9ce033.html"/>
      <url>posts/2f9ce033.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前提说明："><a href="#前提说明：" class="headerlink" title="前提说明："></a>前提说明：</h3><p>当然你的系统必须是Windows 11 22000正式版系统（最好是专业版）。什么，我Windows 10也想上车？看见右上角那个小叉号了没？</p><hr><h3 id="一、开启处理器虚拟化支持"><a href="#一、开启处理器虚拟化支持" class="headerlink" title="一、开启处理器虚拟化支持"></a>一、开启处理器虚拟化支持</h3><p>打开电脑💻设置→应用→可选功能→更多Windows功能→勾选hyper-V→勾选powershell2.0→勾选虚拟机平台→确认→重启</p><p>注：<br>如果你的系统不是Windows11 专业版，可能会没有hyper-V这个选项，参考：<a href="https://m.jb51.net/article/182013.htm">解决方案</a></p><p><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-bed/20220121154736.png"><br><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-bed/20220121154816.png"><br>（记得重启电脑）</p><hr><h3 id="二、安装Window-Subsystem-for-Android应用"><a href="#二、安装Window-Subsystem-for-Android应用" class="headerlink" title="二、安装Window Subsystem for Android应用"></a>二、安装Window Subsystem for Android应用</h3><p>1.Window Subsystem for Android下载：<br><a href="https://share.weiyun.com/0Idc7Cbi">Windows11 手动安装WSA（Android）</a></p><p>2.从网盘中下载所需要的文件然后管理员身份运行了Powershell<br>执行<code>Add-AppxPackage -Path</code> 下载的文件<code>.Msixbundle</code>即可<br><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-bed/20220121155310.png"></p><pre class="line-numbers language-Powershell" data-language="Powershell"><code class="language-Powershell">Add-AppxPackage -Path  (你的下载位置)\MicrosoftCorporationII.WindowsSubsystemForAndroid_1.7.32815.0_neutral___8wekyb3d8bbwe.Msixbundle<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-bed/20220121155825.png"><br><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-bed/20220121160317.png"></p><p>3.打开Window Subsystem for Android应用开发人员模式<br><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-bed/20220121160457.png"><br><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-bed/20220121160524.png"></p><hr><h3 id="通过ADB安装安卓app"><a href="#通过ADB安装安卓app" class="headerlink" title="通过ADB安装安卓app"></a>通过ADB安装安卓app</h3><p>1.解压ADB（platform-tools-latest-windows.zip),在解压后的目录右键选择”在Windows终端中打开“<br><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-bed/20220121161241.png"></p><p>2.ADB链接Android系统：</p><p>输入<code>.\adb connect 127.0.0.1:58526</code></p><p>输入<code>.\adb install D:**.apk</code>,安装下载的app<br><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-bed/20220121161511.png"></p><p>在开始菜单可以看到新安装的安卓应用。<br><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-bed/20220121161538.png"></p><hr><h3 id="参考文章；"><a href="#参考文章；" class="headerlink" title="参考文章；"></a>参考文章；</h3><p><a href="https://www.coolapk.com/feed/32797179?shareKey=ODRkZTAyMmI0OWQwNjFlYTM2ZTY%5C~&amp;shareUid=3164854&amp;shareFrom=com.coolapk.market_11.2.5">https://www.coolapk.com/feed/32797179?shareKey=ODRkZTAyMmI0OWQwNjFlYTM2ZTY\~&amp;shareUid=3164854&amp;shareFrom=com.coolapk.market_11.2.5</a><br><a href="https://blog.csdn.net/u012514495/article/details/120885242">https://blog.csdn.net/u012514495/article/details/120885242</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows 11 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python format 格式化函数</title>
      <link href="posts/60cdc116.html"/>
      <url>posts/60cdc116.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>Python2.6 开始，新增了一种格式化字符串的函数 <code>str.format()</code>，它增强了字符串格式化的功能。</p><p>基本语法是通过 <code>{}</code> 和 <code>:</code> 来代替以前的 <code>%</code> 。</p><p>format 函数可以接受不限个参数，位置可以不按顺序。</p><hr><p>实例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token string">"{} {}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">)</span>    <span class="token comment"># 不设置指定位置，按默认顺序</span><span class="token string">'hello world'</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">"{0} {1}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">)</span>  <span class="token comment"># 设置指定位置</span><span class="token string">'hello world'</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token string">"{1} {0} {1}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">)</span>  <span class="token comment"># 设置指定位置</span><span class="token string">'world hello world'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以设置参数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token comment"># -*- coding: UTF-8 -*-</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"网站名：{name}, 地址 {url}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"Chanpoe"</span><span class="token punctuation">,</span> url<span class="token operator">=</span><span class="token string">"www.chanpoe.top"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 通过字典设置参数</span>site <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Chanpoe"</span><span class="token punctuation">,</span> <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"www.chanpoe.top"</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"网站名：{name}, 地址 {url}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token operator">**</span>site<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 通过列表索引设置参数</span>my_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Chanpoe'</span><span class="token punctuation">,</span> <span class="token string">'www.chanpoe.top'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"网站名：{0[0]}, 地址 {0[1]}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>my_list<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># "0" 是必须的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果是：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">网站名：Chanpoe<span class="token punctuation">,</span> 地址 www<span class="token punctuation">.</span>chanpoe<span class="token punctuation">.</span>top网站名：Chanpoe<span class="token punctuation">,</span> 地址 www<span class="token punctuation">.</span>chanpoe<span class="token punctuation">.</span>top网站名：Chanpoe<span class="token punctuation">,</span> 地址 www<span class="token punctuation">.</span>chanpoe<span class="token punctuation">.</span>top<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>也可以向<code>str.format()</code>传入对象：<br>实例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token comment"># -*- coding: UTF-8 -*-</span> <span class="token keyword">class</span> <span class="token class-name">AssignValue</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>value <span class="token operator">=</span> valuemy_value <span class="token operator">=</span> AssignValue<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'value 为: {0.value}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>my_value<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># "0" 是可选的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">value 为<span class="token punctuation">:</span> <span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="数字格式化："><a href="#数字格式化：" class="headerlink" title="数字格式化："></a>数字格式化：</h3><p>下表展示了 <code>str.format()</code> 格式化数字的多种方法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{:.2f}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">3.1415926</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">3.14</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-bed/20220120170804.png"></p><p><code>^</code>, <code>&lt;</code>, <code>&gt;</code> 分别是居中、左对齐、右对齐，后面带宽度， <code>:</code> 号后面带填充的字符，只能是一个字符，不指定则默认是用空格填充。</p><p><code>+</code> 表示在正数前显示 <code>+</code>，负数前显示 <code>-</code>；  （空格）表示在正数前加空格</p><p><code>b、d、o、x</code> 分别是二进制、十进制、八进制、十六进制。</p><p>此外我们可以使用大括号 <code>{}</code> 来转义大括号，如下实例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token comment"># -*- coding: UTF-8 -*-</span> <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"{} 对应的位置是 {{0}}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">"Chanpoe"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">Chanpoe 对应的位置是 <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h3><p><a href="https://www.runoob.com/python/att-string-format.html">https://www.runoob.com/python/att-string-format.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VScode配置C/C++环境</title>
      <link href="posts/470cf09.html"/>
      <url>posts/470cf09.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>在此之前，我是用的一直都是Visual Studio 2019这款IDE进行代码的编写运行和调试的，但是由于其功能太过冗余，多数功能对于我这种小白来说不太友好，虽然功能强大，但是实用性不高，最主要的是它太占内存了，而且写出的代码也需要放在项目文件里，每一个项目文件就有100多MB，所以确实不太方便。<br><br>VSCode作为一款微软出的轻量级编辑器，它本身只是一款文本编辑器而已，所有的功能都是以插件扩展的形式所存在，想用什么功能就安装对应的扩展即可，非常方便，同时也支持非常多的主题和图标，外观比较好看，重要的是VSCode支持各大主流操作系统，包括Windows、Linux和Mac OS。所以就选择它作为自己的一款主要的编辑器来使用。<br><br><br>下面，就是本次配置环境的方法记录：</p><hr><h2 id="一、安装MinGW："><a href="#一、安装MinGW：" class="headerlink" title="一、安装MinGW："></a>一、安装MinGW：</h2><p>(MinGW最好安装在C盘，后面有些问题就不会出现)<br><a href="http://c.biancheng.net/view/8077.html">MinGW下载和安装教程</a></p><hr><h2 id="二、安装VScode："><a href="#二、安装VScode：" class="headerlink" title="二、安装VScode："></a>二、安装VScode：</h2><p><a href="https://code.visualstudio.com/">Vscode官网</a></p><hr><h2 id="三、安装各种插件："><a href="#三、安装各种插件：" class="headerlink" title="三、安装各种插件："></a>三、安装各种插件：</h2><p>1.中文语言包：<code>Chinese (Simplified) (简体中文) Language Pack for Visual Studio Code</code><br><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-bed/20220118140841.png"><br>2.编程语言运行扩展：<code>Code Runner</code><br><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-bed/20220118141755.png"><br>3.C/C++：<code>C/C++</code><br><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-bed/20220118141102.png"></p><hr><h2 id="四、配置C-C-环境："><a href="#四、配置C-C-环境：" class="headerlink" title="四、配置C/C++环境："></a>四、配置C/C++环境：</h2><h3 id="1-配置编译器"><a href="#1-配置编译器" class="headerlink" title="1.配置编译器"></a>1.配置编译器</h3><p>接下来配置编译器路径，按快捷键Ctrl+Shift+P调出命令面板，输入C/C++，选择“Edit Configurations(UI)”进入配置。这里配置两个选项： - 编译器路径：C:\MinGW\bin\g++.exe<br><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-bed/20220118144952.png"><br><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-bed/20220118145040.png"><br><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-bed/20220118145111.png"></p><p>配置完成后，此时在侧边栏可以发现多了一个.vscode文件夹，并且里面有一个c_cpp_properties.json文件，说明上述配置成功。<br><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-bed/20220118145328.png"><br>内容如下：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Win32"</span><span class="token punctuation">,</span>            <span class="token property">"includePath"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"${workspaceFolder}/**"</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"defines"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"_DEBUG"</span><span class="token punctuation">,</span>                <span class="token string">"UNICODE"</span><span class="token punctuation">,</span>                <span class="token string">"_UNICODE"</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"windowsSdkVersion"</span><span class="token operator">:</span> <span class="token string">"10.0.19041.0"</span><span class="token punctuation">,</span>            <span class="token property">"compilerPath"</span><span class="token operator">:</span> <span class="token string">"C:/MinGW/bin/g++.exe"</span><span class="token punctuation">,</span>            <span class="token property">"cStandard"</span><span class="token operator">:</span> <span class="token string">"c17"</span><span class="token punctuation">,</span>            <span class="token property">"cppStandard"</span><span class="token operator">:</span> <span class="token string">"c++17"</span><span class="token punctuation">,</span>            <span class="token property">"intelliSenseMode"</span><span class="token operator">:</span> <span class="token string">"gcc-x64"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-配置构建任务："><a href="#2-配置构建任务：" class="headerlink" title="2.配置构建任务："></a>2.配置构建任务：</h3><p>接下来，创建一个<code>tasks.json</code>文件来告诉VS Code如何构建（编译）程序。该任务将调用<code>g++</code>编译器基于源代码创建可执行文件。 按快捷键<code>Ctrl+Shift+P</code>调出命令面板，输入<code>tasks</code>，选择<code>“Tasks:Configure Default Build Task”</code>：<br><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-bed/20220118145613.png"><br><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-bed/20220118145654.png"></p><p>此时会出现一个名为<code>tasks.json</code>的配置文件:<br><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-bed/20220118145803.png"><br>内容如下：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"tasks"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"cppbuild"</span><span class="token punctuation">,</span>            <span class="token property">"label"</span><span class="token operator">:</span> <span class="token string">"C/C++: g++.exe 生成活动文件"</span><span class="token punctuation">,</span>            <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"C:/MinGW/bin/g++.exe"</span><span class="token punctuation">,</span>            <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"-fdiagnostics-color=always"</span><span class="token punctuation">,</span>                <span class="token string">"-g"</span><span class="token punctuation">,</span>                <span class="token string">"${file}"</span><span class="token punctuation">,</span>                <span class="token string">"-o"</span><span class="token punctuation">,</span>                <span class="token string">"${fileDirname}\\${fileBasenameNoExtension}.exe"</span><span class="token punctuation">,</span>                <span class="token string">"-fexec-charset=GBK"</span> <span class="token comment">//修复中文乱码问题</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"options"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"cwd"</span><span class="token operator">:</span> <span class="token string">"C:/MinGW/bin"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"problemMatcher"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"$gcc"</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"group"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"kind"</span><span class="token operator">:</span> <span class="token string">"build"</span><span class="token punctuation">,</span>                <span class="token property">"isDefault"</span><span class="token operator">:</span> <span class="token boolean">true</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"detail"</span><span class="token operator">:</span> <span class="token string">"调试器生成的任务。"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"2.0.0"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-配置调试设置："><a href="#3-配置调试设置：" class="headerlink" title="3.配置调试设置："></a>3.配置调试设置：</h3><p>这里主要是为了在<code>.vscode</code>文件夹中产生一个<code>launch.json</code>文件，用来配置调试的相关信息。新建文件<code>test.cpp</code><br>输入以下测试代码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Hello World!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用快捷加 Ctrl + F5， 或者如下图：<br><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-bed/20220118150846.png"></p><br>会有一个报错，是因为官网版本没有gdb.exe<p>解决办法：打开cmd运行：</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">mingw-get install gdb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><p>查看<code>launch.json</code>文件：<br>内容如下：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.2.0"</span><span class="token punctuation">,</span>    <span class="token comment">// "cppvsdbg"不可调试  "cppdbg"可调试</span>    <span class="token property">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token comment">//非调试模式</span>        <span class="token punctuation">{</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"非调试模式"</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"cppvsdbg"</span><span class="token punctuation">,</span>            <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"launch"</span><span class="token punctuation">,</span>            <span class="token property">"program"</span><span class="token operator">:</span> <span class="token string">"${fileDirname}\\${fileBasenameNoExtension}.exe"</span><span class="token punctuation">,</span>            <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"/C"</span><span class="token punctuation">,</span>                <span class="token string">"${fileDirname}\\${fileBasenameNoExtension}.exe"</span><span class="token punctuation">,</span>                <span class="token string">"&amp;"</span><span class="token punctuation">,</span>                <span class="token string">"echo."</span><span class="token punctuation">,</span>                <span class="token string">"&amp;"</span><span class="token punctuation">,</span>                <span class="token string">"pause"</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"stopAtEntry"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"cwd"</span><span class="token operator">:</span> <span class="token string">"${fileDirname}"</span><span class="token punctuation">,</span>            <span class="token property">"miDebuggerPath"</span><span class="token operator">:</span> <span class="token string">"C:\\MinGW\\bin\\gdb.exe"</span><span class="token punctuation">,</span>            <span class="token property">"environment"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token comment">// "externalConsole": true,</span>            <span class="token property">"console"</span><span class="token operator">:</span> <span class="token string">"externalTerminal"</span><span class="token punctuation">,</span>            <span class="token property">"internalConsoleOptions"</span><span class="token operator">:</span> <span class="token string">"neverOpen"</span><span class="token punctuation">,</span>            <span class="token property">"preLaunchTask"</span><span class="token operator">:</span> <span class="token string">"C/C++: g++.exe 生成活动文件"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment">//调试模式</span>        <span class="token comment">// {</span>        <span class="token comment">//     "name": "调试模式",</span>        <span class="token comment">//     "type": "cppdbg",</span>        <span class="token comment">//     "request": "launch",</span>        <span class="token comment">//     "program": "${fileDirname}\\${fileBasenameNoExtension}.exe",</span>        <span class="token comment">//     "args": [</span>        <span class="token comment">//         "/C",</span>        <span class="token comment">//         "${fileDirname}\\${fileBasenameNoExtension}.exe",</span>        <span class="token comment">//         "&amp;",</span>        <span class="token comment">//         "echo.",</span>        <span class="token comment">//         "&amp;",</span>        <span class="token comment">//         "pause"</span>        <span class="token comment">//     ],</span>        <span class="token comment">//     "stopAtEntry": false,</span>        <span class="token comment">//     "cwd": "C:/MinGW/bin",</span>        <span class="token comment">//     "environment": [],</span>        <span class="token comment">//     "externalConsole": true,</span>        <span class="token comment">//     "MIMode": "gdb",</span>        <span class="token comment">//     "miDebuggerPath": "C:\\MinGW\\bin\\gdb.exe",</span>        <span class="token comment">//     "setupCommands": [</span>        <span class="token comment">//         {</span>        <span class="token comment">//             "description": "为 gdb 启用整齐打印",</span>        <span class="token comment">//             "text": "-enable-pretty-printing",</span>        <span class="token comment">//             "ignoreFailures": true</span>        <span class="token comment">//         }</span>        <span class="token comment">//     ],</span>        <span class="token comment">//     "preLaunchTask": "C/C++: g++.exe 生成活动文件"</span>        <span class="token comment">// }</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意！！！<br>（需要把<code>"externalConsole"</code>的默认值改为 <code>true</code>）加入一句<code>"console": "externalTerminal",</code>就可以使用外部的控制台了。<br><br><br>至此安装已经成功~</p><hr><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><p><a href="https://zhuanlan.zhihu.com/p/87864677">VScode配置c++环境（MinGW安装教程）</a><br><a href="https://blog.csdn.net/qq_45467083/article/details/108962924">VSCode配置C/C++环境</a><br><a href="https://zhuanlan.zhihu.com/p/113222681">史上最全vscode配置使用教程VS</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 访问字典中元素</title>
      <link href="posts/926c01d0.html"/>
      <url>posts/926c01d0.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="一、通过“键值对”-key-value-访问："><a href="#一、通过“键值对”-key-value-访问：" class="headerlink" title="一、通过“键值对”(key-value)访问："></a>一、通过“键值对”(key-value)访问：</h3><p>格式：<br>1.<code>print(dict[key])</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">dict</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">'aa'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">:</span> <span class="token string">'ee'</span><span class="token punctuation">,</span> <span class="token string">'Ty'</span><span class="token punctuation">:</span> <span class="token number">45</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token string">'D'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>输出：ee<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.<code>dict.get(key,[default])</code><br>default为可选项，用于指定当‘键’不存在时 返回一个默认值，如果省略，默认返回None</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">dict</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">'aa'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">:</span> <span class="token string">'ee'</span><span class="token punctuation">,</span> <span class="token string">'Ty'</span><span class="token punctuation">:</span> <span class="token number">45</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'字典中不存在键为4的元素'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>输出：aa<span class="token boolean">None</span><span class="token punctuation">[</span><span class="token string">'字典中不存在键为4的元素'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="二、遍历字典："><a href="#二、遍历字典：" class="headerlink" title="二、遍历字典："></a>二、遍历字典：</h3><p>1.使用字典对象里的`dict.items()’方法获取字典的各个元素即“键值对”的<a href="https://www.runoob.com/python3/python3-tuple.html">元组</a>列表：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">dict</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">'aa'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">:</span> <span class="token string">'ee'</span><span class="token punctuation">,</span> <span class="token string">'Ty'</span><span class="token punctuation">:</span> <span class="token number">45</span><span class="token punctuation">}</span><span class="token keyword">for</span> item <span class="token keyword">in</span> <span class="token builtin">dict</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>输出：<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'aa'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'ee'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'Ty'</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.获取到具体的每个键和值：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">dict</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">'aa'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">:</span> <span class="token string">'ee'</span><span class="token punctuation">,</span> <span class="token string">'Ty'</span><span class="token punctuation">:</span> <span class="token number">45</span><span class="token punctuation">}</span><span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> <span class="token builtin">dict</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>输出：<span class="token number">1</span> <span class="token number">1</span><span class="token number">2</span> aaD eeTy <span class="token number">45</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.还可以使用<code>keys()</code>和<code>value()</code>方法获取字典的键和值列表：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">dict</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">'aa'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">:</span> <span class="token string">'ee'</span><span class="token punctuation">,</span> <span class="token string">'Ty'</span><span class="token punctuation">:</span> <span class="token number">45</span><span class="token punctuation">}</span><span class="token keyword">for</span> key <span class="token keyword">in</span> <span class="token builtin">dict</span><span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token keyword">for</span> value <span class="token keyword">in</span> <span class="token builtin">dict</span><span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>输出：<span class="token number">1</span><span class="token number">2</span>DTy<span class="token number">1</span>aaee<span class="token number">45</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h3><p><a href="https://www.cnblogs.com/xioawu-blog/p/11074887.html">https://www.cnblogs.com/xioawu-blog/p/11074887.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小One抓取位置</title>
      <link href="posts/8900ea1b.html"/>
      <url>posts/8900ea1b.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><h3 id="一、自己在手机上面打卡"><a href="#一、自己在手机上面打卡" class="headerlink" title="一、自己在手机上面打卡"></a>一、自己在手机上面打卡</h3><p>一定要给小One位置权限</p><hr><h3 id="二、使用电脑登录官网"><a href="#二、使用电脑登录官网" class="headerlink" title="二、使用电脑登录官网"></a>二、使用电脑登录官网</h3><p>手机号+验证码<br><a href="https://www.ioteams.com/ncov/#/login">小One易统计</a></p><hr><h3 id="三、电脑F12，进入开发者工具调试页面"><a href="#三、电脑F12，进入开发者工具调试页面" class="headerlink" title="三、电脑F12，进入开发者工具调试页面"></a>三、电脑F12，进入开发者工具调试页面</h3><p><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-bed/xiaoonedenglu.png"><br><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-bed/chongxinshangbao.png"><br><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-bed/lastreport.png"><br><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-bed/responsesese.png"><br>找到位置信息，复制发我：<br><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-bed/weizhixinxi.png"></p><hr><h3 id="不会使用F12参考："><a href="#不会使用F12参考：" class="headerlink" title="不会使用F12参考："></a>不会使用F12参考：</h3><p><a href="https://blog.csdn.net/weixin_41819731/article/details/80472232">https://blog.csdn.net/weixin_41819731/article/details/80472232</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 说明 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拓扑结构</title>
      <link href="posts/851dea84.html"/>
      <url>posts/851dea84.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>今天学习神经网络的时候看到了一个<code>拓扑结构</code>的概念，对此比较陌生，所以便对此展开了学习。</p><h1 id="一、拓扑结构："><a href="#一、拓扑结构：" class="headerlink" title="一、拓扑结构："></a>一、拓扑结构：</h1><p>首先我们来解释一下拓扑的含义，所谓“拓扑”就是把实体抽象成与其大小、形状无关的“点”，而把连接实体的线路抽象成“线”，进而以图的形式来表示这些点与线之间关系的方法，其目的在于研究这些点、线之间的相连关系。表示点和线之间关系的图被称为拓扑结构图。拓扑结构与几何结构属于两个不同的数学概念。在几何结构中，我们要考察的是点、线之间的位置关系，或者说几何结构强调的是点与线所构成的形状及大小。如梯形、正方形、平行四边形及圆都属于不同的几何结构，但从拓扑结构的角度去看，由于点、线间的连接关系相同，从而具有相同的拓扑结构即环型结构。也就是说，不同的几何结构可能具有相同的拓扑结构。</p><p>类似地，在计算机网络中，我们把计算机、终端、通信处理机等设备抽象成点，把连接这些设备的通信线路抽象成线，并将由这些点和线所构成的拓扑称为网络拓扑结构。<br>网络拓扑结构反映出网络的结构关系，它对于网络的性能、可靠性以及建设管理成本等都有着重要的影响，因此网络拓扑结构的设计在整个网络设计中占有十分重要的地位，在网络构建时，网络拓常见的网络拓扑结构。<br>在计算机网络中常见的拓扑结构有<code>总线型</code>、<code>星型</code>、<code>环型</code>、<code>树型</code>和<code>网状型</code>等。</p><h1 id="二、不同类型的拓扑结构："><a href="#二、不同类型的拓扑结构：" class="headerlink" title="二、不同类型的拓扑结构："></a>二、不同类型的拓扑结构：</h1><h3 id="1-总线型拓扑："><a href="#1-总线型拓扑：" class="headerlink" title="1.总线型拓扑："></a>1.总线型拓扑：</h3><p><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-bed/%E6%80%BB%E7%BA%BF%E5%9E%8B%E6%8B%93%E6%89%91.png"></p><p>总线型拓扑中采用单根传输线路作为传输介质，所有站点通过专门的连接器连到这个公共信道上，这个公共的信道称为总线。任何一个站点发送的数据都能通过总线传播，同时能被总线上的所有其他站点接收到。可见，总线型结构的网络是一种广播网络。扑结构往往是首先要考虑的因素之一。<br>在总线结构中，总线有一定的负载能力，因此，总线长度有一定限制，一条总线也只能连接一定数量的结点。<br>总线布局的特点是：结构简单灵活，非常便于扩充;可靠性高，网络响应速度快;设备量少、价格低、安装使用方便;共享资源能力强，极便于广播式工作即一个结点发送所有结点都可接收。总线型拓扑是基本局域网拓扑形式之一。<br>在总线两端连接的器件称为端结器(末端阻抗匹配器、或终止器)。主要与总线进行阻抗匹配，最大限度吸收传送端部的能量，避免信号反射回总线产生不必要的干扰。<br>总线形网络结构是目前使用最广泛的结构，也是最传统的一种主流网络结构，适合于信息管理系统、办公自动化系统领域的应用。</p><h3 id="2-星型拓扑："><a href="#2-星型拓扑：" class="headerlink" title="2.星型拓扑："></a>2.星型拓扑：</h3><p><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-bed/xingxingtuopu.png"><br>星型拓扑中有一个中心节点，其他各节点通过各自的线路与中心节点相连，形成辐射型结构。各节点间的通信必须通过中心节点的作用，如图A 到B 或A到C 都要经过中心节点D。<br>星型拓扑的网络具有结构简单、易于建网和易于管理等特点。但这种结构要耗费大量的电缆，同时中心节点的故障会直接造成整个网络的瘫痪。星型拓扑也经常应用于局域网中。<br>星型布局是以中央结点为中心与各结点连接而组成的，各结点与中央结点通过点与点方式连接，中央点执行集中式通信控制策略，因此中央结点相当复杂，负担也重。<br>目前流行的PBX就是星型拓扑结构的典型实例，如图所示。<br>以星型拓扑结构组网，其中任何两个站点要进行通信都必须经过中央结点控制。中央结点主要功能有</p><ol><li><p>为需要通信的设备建立物理连接</p></li><li><p>为两台设备通信过程中维持这一通路</p></li><li><p>在完成通信或不成功时,拆除通道<br>在文件服务器/工作站(File Server/Workstation )局域网模式中，中心点为文件服务器，存放共享资源。由于这种拓扑结构，中心点与多台工作站相连,为便于集中连线，目前多采用集线器(HUB)。<br>星型拓扑结构特点:网络结构简单,便于管理、集中控制, 组网容易;网络延迟时间短，误码率低，网络共享能力较差，通信线路利用率不高，中央节点负担过重，可同时连双绞线、同轴电缆及光纤等多种媒介。<br>树型拓扑结构可以看作成星型拓扑的一种扩展，也称扩展星型拓扑。</p></li></ol><hr><h3 id="3-环形拓扑："><a href="#3-环形拓扑：" class="headerlink" title="3.环形拓扑："></a>3.环形拓扑：</h3><p><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-bed/huanxingtuopu.png"></p><p>如图所示，在环型拓扑中，各节点和通信线路连接形成的一个闭合的环。在环路中，数据按照一个方向传输。发送端发出的数据，延环绕行一周后，回到发送端，由发送端将其从环上删除。我们可以看到任何一个节点发出的数据都可以被环上的其他节点接收到。<br>环型拓扑具有结构简单，容易实现，传输时延确定以及路径选择简单等优点，但是，网络中的每一个节点或连接节点的通信线路都有可能成为网络可靠性的瓶颈。当网络中的任何一个节点出现故障都可能会造成网络的瘫痪。另外，在这种拓扑结构中，节点的加入和拆除过程比较复杂。环型拓扑也是局域网中常用的一种拓扑形式。<br>环形网的特点是：信息在网络中沿固定方向流动，两个结点间仅有唯一的通路，大大简化了路径选择的控制;某个结点发生故障时，可以自动旁路，可靠性较高;由于信息是串行穿过多个结点环路接口，当结点过多时，影响传输效率，使网络响应时间变长。但当网络确定时，其延时固定，实时性强;由于环路封闭故扩充不方便。<br>环形网也是微机局域网常用拓扑结构之一，适合信息处理系统和工厂自动化系统。1985年IBM公司推出的令牌环形网(IBM Token Ring)是其典范。在FDDI得以应用推广后，这种结构会进一步得到采用。</p><h3 id="4-网状拓扑："><a href="#4-网状拓扑：" class="headerlink" title="4.网状拓扑："></a>4.网状拓扑：</h3><p><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-bed/wangzhuangtuopu.png"></p><p>在网状拓扑结构中，节点之间的连接是任意的，每个节点都有多条线路与其他节点相连，这样使得节点之间存在多条路径可选，如图1.7中从A 到C 可以是A-B-C 也可以是A-D-B-C，在传输数据时可以灵活的选用空闲路径或者避开故障线路。<br>可见网状拓扑可以充分、合理的使用网络资源，并且具有可靠性高的优点。我们知道，广域网覆盖面积大，传输距离长，网络的故障会给大量的用户带来严重的危害，因此在广域网中，为了提高网络的可靠性通常采用网状拓扑结构，如图所示为一个简单的广域网示意图。<br>但是我们也应该看到，这个优点是以高投资和高复杂的管理为代价的。将多个子网或多个局域网连接起来构成网状型拓扑结构。在一个子网中，集线器、中继器将多个设备连接起来，而桥接器、路由器及网关则将子网连接起来。根据组网硬件不同，主要有三种网状型拓扑:<br>①<code>网状网</code>：在一个大的区域内，用无线通信连路连接一个大型网络时，网状网是最好的拓扑结构。通过路由器与路由器相连，可让网络选择一条最快的路径传送数据。<br>②<code>主干网</code>：通过桥接器与路由器把不同的子网或LAN 连接起来形成单个总线或环型拓扑结构，这种网通常采用光纤做主干线。<br>③<code>星状相连网</code>：利用一些叫做超级集线器的设备将网络连接起来，由于星型结构的特点，网络中任一处的故障都可容易查找并修复。应该指出,在实际组网中,拓扑结构不一定是单一的,通常是几种结构的混用。<br><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-bed/lizilizi.png"><br>比如，将总线型与星型结合起来就形成了总线型/星型拓扑结构，用一条或多条总线把多组设备连接起来，相连的每组设备呈星型分布。采用这种拓扑结构，用户很容易配置和重新配置网络设备。如图所示。</p><h1 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h1><p><a href="https://blog.csdn.net/starshinning975/article/details/53511343">https://blog.csdn.net/starshinning975/article/details/53511343</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 拓扑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客格式记录</title>
      <link href="posts/fe0c2a50.html"/>
      <url>posts/fe0c2a50.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Front-matter选项：<br><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-bed/%E5%8D%9A%E5%AE%A2%E6%A0%BC%E5%BC%8F.png"></p>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用华为云搭建图床</title>
      <link href="posts/5b992d75.html"/>
      <url>posts/5b992d75.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>面对各大图床日益降低我们的图片上传的体积，面对图床服务器不稳定的各种问题，搭建一个属于自己的图床是我们的不二选择，今天下午突然发现了各大云（华为云、阿里云、腾讯云等等）都有对象储存服务的售卖，其中，目前发现华为云提供按量收费，价格真的很良心！<br><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-bed/Z%7DBG5%7DGT%60(I%60@FE1EOB8)$4.png"><br>这样看来，如果平常日用，一个G才需要0.1，哇，果断搞起！<br>附链接：<br><a href="https://www.huaweicloud.com/">华为云</a><br><a href="https://www.huaweicloud.com/pricing.html?tab=detail#/obs">储存收费详情</a></p><h3 id="一、注册华为云账号，登录进入首页控制台："><a href="#一、注册华为云账号，登录进入首页控制台：" class="headerlink" title="一、注册华为云账号，登录进入首页控制台："></a>一、注册华为云账号，登录进入首页控制台：</h3><p><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-bed/DKKU%5DDG3TMFC03KILPB@M1W.png"></p><p><code>一定要进入北京四的区域（便宜(可能bushi)）</code><br><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/20220211010608.png"></p><h3 id="二、打开对象储存服务OBS："><a href="#二、打开对象储存服务OBS：" class="headerlink" title="二、打开对象储存服务OBS："></a>二、打开对象储存服务OBS：</h3><p><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/20220211010912.png"></p><p>创建桶：<br><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-bed/%5BQ9YP6%5D_38P51UXL%7D@MHI4E.png"></p><p>输入桶的名称<br><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-bed/C%60L~%5BMBA~QHQIVUBKQ%7BGT$R.png"></p><p>重点：选择<code>公共读</code><br><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/20220211011028.png"></p><h3 id="三、获取AK和SK："><a href="#三、获取AK和SK：" class="headerlink" title="三、获取AK和SK："></a>三、获取AK和SK：</h3><p>在<code>总览</code>里面打开<code>获取AK和SK</code>：<br><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-bed/~I~4R0EZ%60F_B@XEO%5BK~C%7D@W.png"></p><p>获取到一个<code>csv</code>文件，里面有AccessKeyID和AccessKeySecret：<br><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-bed/csv.png"></p><h3 id="四、在桶里新建储存图片的文件夹："><a href="#四、在桶里新建储存图片的文件夹：" class="headerlink" title="四、在桶里新建储存图片的文件夹："></a>四、在桶里新建储存图片的文件夹：</h3><p><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-bed/%5BUB7@HYUGOY$CB%60E2DWFV3N.png"></p><h3 id="五、记下桶名称、Endpoint信息："><a href="#五、记下桶名称、Endpoint信息：" class="headerlink" title="五、记下桶名称、Endpoint信息："></a>五、记下桶名称、Endpoint信息：</h3><p><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-bed/(J6EK3F%60_QK%5B%7B)Z$__WUWSV.png"></p><h3 id="六、在Github上下载PicGo软件："><a href="#六、在Github上下载PicGo软件：" class="headerlink" title="六、在Github上下载PicGo软件："></a>六、在Github上下载PicGo软件：</h3><p>下载地址：<a href="https://github.com/Molunerfinn/PicGo/releases">PicGo</a></p><p><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/20220211011157.png"></p><h3 id="七、打开PicGo软件，在插件设置中下载华为云OBS："><a href="#七、打开PicGo软件，在插件设置中下载华为云OBS：" class="headerlink" title="七、打开PicGo软件，在插件设置中下载华为云OBS："></a>七、打开PicGo软件，在插件设置中下载华为云OBS：</h3><p><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-bed/huaweichajian.png"></p><p><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-bed/xuanzehuaweiyun.png"></p><h3 id="八、上传区选择华为云OBS即可上传："><a href="#八、上传区选择华为云OBS即可上传：" class="headerlink" title="八、上传区选择华为云OBS即可上传："></a>八、上传区选择华为云OBS即可上传：</h3><p><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/20220211011613.png"></p><h3 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h3><p><a href="https://blog.csdn.net/weixin_44289959/article/details/120631050">https://blog.csdn.net/weixin_44289959/article/details/120631050</a><br><a href="https://common-buy.aliyun.com/?spm=5176.8465980.home.19.6e451450SUjtkA&amp;commodityCode=ossbag&amp;request=%7B%22region%22:%22china-common%22%7D#/buy">阿里云oss储存OSS连接(不推荐)</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建个人博客</title>
      <link href="posts/c442673f.html"/>
      <url>posts/c442673f.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="一、本地搭建博客：-以下代码在CMD上运行"><a href="#一、本地搭建博客：-以下代码在CMD上运行" class="headerlink" title="一、本地搭建博客：(以下代码在CMD上运行)"></a>一、本地搭建博客：(以下代码在CMD上运行)</h3><p>1.在Windows本地下载<code>Node.js</code>：<br><a href="https://nodejs.org/">Node.js官网</a></p><p>2.安装<code>cnpm</code>：</p><pre class="line-numbers language-none"><code class="language-none">npm install -g cnpm --registry=https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.使用<code>cnpm</code>在Windows本地安装<code>hexo博客</code>：</p><pre class="line-numbers language-none"><code class="language-none">cnpm install -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.在Windows本地新建blog文件夹：<br>CMD：</p><pre class="line-numbers language-none"><code class="language-none">md blog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5.初始化<code>hexo</code>：</p><pre class="line-numbers language-none"><code class="language-none">hexo init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>初始化成功后可以打开 <a href="http://localhost:4000/">http://localhost:4000</a> 验证效果</p><p>6.在<code>package.json</code>文件中添加<code>npm</code>脚本：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token property">"deploy"</span><span class="token operator">:</span> <span class="token string">"hexo clean &amp;&amp; hexo g -d"</span><span class="token punctuation">,</span>  <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"hexo clean &amp;&amp; hexo g &amp;&amp; hexo s"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>（方便部署到服务器）<br>添加后就可以直接在第四个步骤做完以后上传到服务器了：</p><pre class="line-numbers language-none"><code class="language-none">npm run deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="二、git环境搭建："><a href="#二、git环境搭建：" class="headerlink" title="二、git环境搭建："></a>二、git环境搭建：</h3><p>1.在官网下载安装<code>git</code>：<br><a href="https://git-scm.com/downloads">git官网</a></p><p>2.生成<code>ssh</code>认证：</p><pre class="line-numbers language-none"><code class="language-none">git config --global user.name "yourname"git config --global user.email youremail@example.comssh-keygen -t rsa -C "youremail@example.com"git config --global core.autocrlf false  // 禁用自动转换，这个不设置后面上传时会出现警告<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注：<br>最后获取到的<code>ssh</code>认证在<code>C:Usersyourname.ssh</code>中</p><p>3.安装<code>git</code>：</p><pre class="line-numbers language-none"><code class="language-none">git --version // 如无，则安装yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-develyum install -y git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>4.在服务器新建用户并配置其仓库：</p><pre class="line-numbers language-none"><code class="language-none">useradd gitpasswd git // 设置密码su git // 这步很重要，不切换用户后面会很麻烦cd /home/git/mkdir -p projects/blog // 项目存在的真实目录mkdir repos &amp;&amp; cd reposgit init --bare blog.git // 创建一个裸露的仓库cd blog.git/hooksvi post-receive // 创建 hook 钩子函数，输入了内容如下<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">#!/bin/shgit --work-tree=/home/git/projects/blog --git-dir=/home/git/repos/blog.git checkout -f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>添加完成后修改权限：</p><pre class="line-numbers language-none"><code class="language-none">chmod +x post-receiveexit // 退出到 root 登录chown -R git:git /home/git/repos/blog.git // 添加权限<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>5.测试<code>git</code>仓库是否可用，在Windows本地另找文件夹</p><pre class="line-numbers language-none"><code class="language-none">git clone git@server_ip:/home/git/repos/blog.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="如果可以git下来空的仓库，就说明git仓库搭建成功了："><a href="#如果可以git下来空的仓库，就说明git仓库搭建成功了：" class="headerlink" title="如果可以git下来空的仓库，就说明git仓库搭建成功了："></a>如果可以<code>git</code>下来空的仓库，就说明<code>git</code>仓库搭建成功了：</h2><p><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-bed/git%E4%BB%93%E5%BA%93%E8%8E%B7%E5%8F%96%E6%88%90%E5%8A%9F%E5%9B%BE.png"></p><h3 id="三、建立本地与服务器的连接："><a href="#三、建立本地与服务器的连接：" class="headerlink" title="三、建立本地与服务器的连接："></a>三、建立本地与服务器的连接：</h3><p>1.在Windows本地建立<code>ssh</code>信任关系：<br>（Windows使用git Bash执行）</p><pre class="line-numbers language-none"><code class="language-none">ssh-copy-id -i C:/Users/yourname/.ssh/id_rsa.pub git@server_ipssh git@server_ip // 测试能否登录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2.(可选)为了安全起见，要禁用<code>git</code>用户的<code>shell</code>登录权限，从而使其只能使用<code>git clone</code>、<code>git push</code>等登录：</p><pre class="line-numbers language-none"><code class="language-none">cat /etc/shells // 查看 git-shell 是否在登录方式里面which git-shell // 查看是否安装vi /etc/shells添加上2步显示出来的路劲，通常在 /usr/bin/git-shell<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>修改<code>/etc/passwd</code>中的权限：</p><pre class="line-numbers language-none"><code class="language-none">// 将原来的git:x:1000:1000::/home/git:/bin/bash// 修改为git:x:1000:1000:,,,:/home/git:/usr/bin/git-shell<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="四、部署到服务器（ngnix的使用）："><a href="#四、部署到服务器（ngnix的使用）：" class="headerlink" title="四、部署到服务器（ngnix的使用）："></a>四、部署到服务器（ngnix的使用）：</h3><p>1.下载并安装<code>nginx</code>：</p><pre class="line-numbers language-none"><code class="language-none">cd /usr/local/srcwget http://nginx.org/download/nginx-1.15.2.tar.gztar xzvf nginx-1.15.2.tar.gzcd nginx-1.15.2./configure // 如果后面还想要配置 SSL 协议，就执行后面一句！./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-file-aio --with-http_realip_moduleyum -y install gcc gcc-c++ autoconf automake make // 安装C++编译环境make &amp;&amp; make installalias nginx='/usr/local/nginx/sbin/nginx' // 为 nginx 取别名，后面可直接用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果Nginx不能访问：</p><pre class="line-numbers language-none"><code class="language-none">1:查看防火状态systemctl status firewalldservice  iptables status2:暂时关闭防火墙systemctl stop firewalldservice  iptables stop3:永久关闭防火墙systemctl disable firewalldchkconfig iptables off4:重启防火墙systemctl enable firewalldservice iptables restart  5:永久关闭后重启//暂时还没有试过chkconfig iptables on<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.测试是否安装成功：</p><pre class="line-numbers language-none"><code class="language-none">nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>浏览器直接访问服务器的公网ip<br>如果可以访问，则说明安装成功，继续执行下面的操作。</p><p>停止<code>nginx</code>：</p><pre class="line-numbers language-none"><code class="language-none">nginx -s stop // 先停止nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.修改<code>nginx</code>配置文件：</p><pre class="line-numbers language-none"><code class="language-none">cd /usr/local/nginx/confvi nginx.conf修改 root 解析路径，如下图同时将 user 改为 root 如下图，不然nginx无法访问 /home/git/projects/blog<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-bed/Nginx%E9%85%8D%E7%BD%AE1.png"><br><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-bed/Nginx%E9%85%8D%E7%BD%AE2.png"></p><p>然后更新nginx配置：</p><pre class="line-numbers language-none"><code class="language-none">sudo /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.confnginx -s reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>4.配置<code>_config.yml</code>文件里的<code>deploy</code>属性：<br><img src="https://image-bed.obs.cn-north-4.myhuaweicloud.com/loading.gif" data-original="https://image-bed.obs.cn-north-4.myhuaweicloud.com/image-bed/deploy%E9%85%8D%E7%BD%AE.png"></p><p>5.上传本地博客到服务器：</p><pre class="line-numbers language-none"><code class="language-none">npm run deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="6-可选-将http网站设置为https："><a href="#6-可选-将http网站设置为https：" class="headerlink" title="6.(可选)将http网站设置为https："></a>6.(可选)将<code>http</code>网站设置为<code>https</code>：</h2><p>需要获取<code>SSL</code>证书<br><a href="https://help.aliyun.com/document_detail/98728.htm?spm=a2c4g.11186623.0.0.4c589d1dRDP3P4#concept-n45-21x-yfb">阿里云官方文档</a></p><h3 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h3><p><a href="https://blog.csdn.net/qq_35561857/article/details/81590953">https://blog.csdn.net/qq_35561857/article/details/81590953</a><br><a href="https://www.jianshu.com/p/ea78bdd0551f/">https://www.jianshu.com/p/ea78bdd0551f/</a><br><a href="https://blog.csdn.net/afei__/article/details/80717153">https://blog.csdn.net/afei__/article/details/80717153</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
